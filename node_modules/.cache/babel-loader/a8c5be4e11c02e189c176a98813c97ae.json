{"ast":null,"code":"/*! mobile-drag-drop 2.3.0-rc.1 | Copyright (c) 2019 Tim Ruffles | MIT License */\n!function (t, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? i(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], i) : i(t.MobileDragDrop = t.MobileDragDrop || {});\n}(this, function (t) {\n  \"use strict\";\n\n  var i = \"dnd-poly-\",\n      s = i + \"snapback\",\n      n = \"dnd-poly-\",\n      h = n + \"dragstart-pending\",\n      e = n + \"dragstart-cancel\",\n      r = [\"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\"],\n      o = [\"none\", \"copy\", \"move\", \"link\"];\n\n  var u = function () {\n    var t = !1;\n\n    try {\n      var i = Object.defineProperty({}, \"passive\", {\n        get: function () {\n          t = !0;\n        }\n      });\n      window.addEventListener(\"test\", null, i);\n    } catch (t) {}\n\n    return t;\n  }();\n\n  function a(t) {\n    return t && t.tagName;\n  }\n\n  function c(t, i, s) {\n    void 0 === s && (s = !0), document.addEventListener(t, i, !!u && {\n      passive: s\n    });\n  }\n\n  function f(t, i) {\n    document.removeEventListener(t, i);\n  }\n\n  function l(t, i, s, n) {\n    void 0 === n && (n = !1);\n    var h = u ? {\n      passive: !0,\n      capture: n\n    } : n;\n    return t.addEventListener(i, s, h), {\n      off: function () {\n        t.removeEventListener(i, s, h);\n      }\n    };\n  }\n\n  function d(t) {\n    return 0 === t.length ? 0 : t.reduce(function (t, i) {\n      return i + t;\n    }, 0) / t.length;\n  }\n\n  function v(t, i) {\n    for (var s = 0; s < t.changedTouches.length; s++) {\n      if (t.changedTouches[s].identifier === i) return !0;\n    }\n\n    return !1;\n  }\n\n  function p(t, i, s) {\n    for (var n = [], h = [], e = 0; e < i.touches.length; e++) {\n      var r = i.touches[e];\n      n.push(r[t + \"X\"]), h.push(r[t + \"Y\"]);\n    }\n\n    s.x = d(n), s.y = d(h);\n  }\n\n  var g = [\"\", \"-webkit-\"];\n\n  function m(t, i, s, n, h) {\n    void 0 === h && (h = !0);\n    var e = i.x,\n        r = i.y;\n    n && (e += n.x, r += n.y), h && (e -= parseInt(t.offsetWidth, 10) / 2, r -= parseInt(t.offsetHeight, 10) / 2);\n\n    for (var o = \"translate3d(\" + e + \"px,\" + r + \"px, 0)\", u = 0; u < g.length; u++) {\n      var a = g[u] + \"transform\";\n      t.style[a] = o + \" \" + s[u];\n    }\n  }\n\n  var b = function () {\n    function t(t, i) {\n      this.t = t, this.i = i, this.s = o[0];\n    }\n\n    return Object.defineProperty(t.prototype, \"dropEffect\", {\n      get: function () {\n        return this.s;\n      },\n      set: function (t) {\n        0 !== this.t.mode && r.indexOf(t) > -1 && (this.s = t);\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(t.prototype, \"types\", {\n      get: function () {\n        if (0 !== this.t.mode) return Object.freeze(this.t.types);\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(t.prototype, \"effectAllowed\", {\n      get: function () {\n        return this.t.effectAllowed;\n      },\n      set: function (t) {\n        2 === this.t.mode && r.indexOf(t) > -1 && (this.t.effectAllowed = t);\n      },\n      enumerable: !0,\n      configurable: !0\n    }), t.prototype.setData = function (t, i) {\n      if (2 === this.t.mode) {\n        if (t.indexOf(\" \") > -1) throw new Error(\"illegal arg: type contains space\");\n        this.t.data[t] = i, -1 === this.t.types.indexOf(t) && this.t.types.push(t);\n      }\n    }, t.prototype.getData = function (t) {\n      if (1 === this.t.mode || 2 === this.t.mode) return this.t.data[t] || \"\";\n    }, t.prototype.clearData = function (t) {\n      if (2 === this.t.mode) {\n        if (t && this.t.data[t]) {\n          delete this.t.data[t];\n          var i = this.t.types.indexOf(t);\n          return void (i > -1 && this.t.types.splice(i, 1));\n        }\n\n        this.t.data = {}, this.t.types = [];\n      }\n    }, t.prototype.setDragImage = function (t, i, s) {\n      2 === this.t.mode && this.i(t, i, s);\n    }, t;\n  }();\n\n  function y(t, i) {\n    return t ? t === r[0] ? o[0] : 0 === t.indexOf(r[1]) || t === r[7] ? o[1] : 0 === t.indexOf(r[4]) ? o[3] : t === r[6] ? o[2] : o[1] : 3 === i.nodeType && \"A\" === i.tagName ? o[3] : o[1];\n  }\n\n  function w(t, i, s, n, h, e, r) {\n    void 0 === e && (e = !0), void 0 === r && (r = null);\n\n    var o = function (t, i, s, n, h, e, r) {\n      void 0 === r && (r = null);\n      var o = i.changedTouches[0],\n          u = new Event(s, {\n        bubbles: !0,\n        cancelable: n\n      });\n      u.dataTransfer = e, u.relatedTarget = r, u.screenX = o.screenX, u.screenY = o.screenY, u.clientX = o.clientX, u.clientY = o.clientY, u.pageX = o.pageX, u.pageY = o.pageY;\n      var a = t.getBoundingClientRect();\n      return u.offsetX = u.clientX - a.left, u.offsetY = u.clientY - a.top, u;\n    }(i, s, t, e, document.defaultView, h, r),\n        u = !i.dispatchEvent(o);\n\n    return n.mode = 0, u;\n  }\n\n  function x(t, i) {\n    if (!t || t === r[7]) return i;\n\n    if (i === o[1]) {\n      if (0 === t.indexOf(o[1])) return o[1];\n    } else if (i === o[3]) {\n      if (0 === t.indexOf(o[3]) || t.indexOf(\"Link\") > -1) return o[3];\n    } else if (i === o[2] && (0 === t.indexOf(o[2]) || t.indexOf(\"Move\") > -1)) return o[2];\n\n    return o[0];\n  }\n\n  var I,\n      j = function () {\n    function t(t, i, s, n) {\n      this.h = t, this.o = i, this.u = s, this.l = n, this.v = 0, this.p = null, this.g = null, this.m = t, this.I = t.changedTouches[0], this.j = this.C.bind(this), this.S = this.k.bind(this), c(\"touchmove\", this.j, !1), c(\"touchend\", this.S, !1), c(\"touchcancel\", this.S, !1);\n    }\n\n    return t.prototype.A = function () {\n      var t = this;\n      this.v = 1, this.O = o[0], this.D = {\n        data: {},\n        effectAllowed: void 0,\n        mode: 3,\n        types: []\n      }, this.M = {\n        x: null,\n        y: null\n      }, this.F = {\n        x: null,\n        y: null\n      };\n      var i = this.u;\n      if (this.N = new b(this.D, function (s, n, h) {\n        i = s, \"number\" != typeof n && \"number\" != typeof h || (t.P = {\n          x: n || 0,\n          y: h || 0\n        });\n      }), this.D.mode = 2, this.N.dropEffect = o[0], w(\"dragstart\", this.u, this.m, this.D, this.N)) return this.v = 3, this.T(), !1;\n      p(\"page\", this.m, this.F);\n      var s,\n          n = this.o.dragImageSetup(i);\n      if (this.L = (s = n, g.map(function (t) {\n        var i = s.style[t + \"transform\"];\n        return i && \"none\" !== i ? i.replace(/translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\") : \"\";\n      })), n.style.position = \"absolute\", n.style.left = \"0px\", n.style.top = \"0px\", n.style.zIndex = \"999999\", n.classList.add(\"dnd-poly-drag-image\"), n.classList.add(\"dnd-poly-icon\"), this._ = n, !this.P) if (this.o.dragImageOffset) this.P = {\n        x: this.o.dragImageOffset.x,\n        y: this.o.dragImageOffset.y\n      };else if (this.o.dragImageCenterOnTouch) {\n        var h = getComputedStyle(i);\n        this.P = {\n          x: 0 - parseInt(h.marginLeft, 10),\n          y: 0 - parseInt(h.marginTop, 10)\n        };\n      } else {\n        var e = i.getBoundingClientRect();\n        h = getComputedStyle(i);\n        this.P = {\n          x: e.left - this.I.clientX - parseInt(h.marginLeft, 10) + e.width / 2,\n          y: e.top - this.I.clientY - parseInt(h.marginTop, 10) + e.height / 2\n        };\n      }\n      return m(this._, this.F, this.L, this.P, this.o.dragImageCenterOnTouch), document.body.appendChild(this._), this.V = window.setInterval(function () {\n        t.X || (t.X = !0, t.Y(), t.X = !1);\n      }, this.o.iterationInterval), !0;\n    }, t.prototype.T = function () {\n      this.V && (clearInterval(this.V), this.V = null), f(\"touchmove\", this.j), f(\"touchend\", this.S), f(\"touchcancel\", this.S), this._ && (this._.parentNode.removeChild(this._), this._ = null), this.l(this.o, this.m, this.v);\n    }, t.prototype.C = function (t) {\n      var i = this;\n\n      if (!1 !== v(t, this.I.identifier)) {\n        if (this.m = t, 0 === this.v) {\n          var s = void 0;\n          if (this.o.dragStartConditionOverride) try {\n            s = this.o.dragStartConditionOverride(t);\n          } catch (t) {\n            s = !1;\n          } else s = 1 === t.touches.length;\n          return s ? void (!0 === this.A() && (this.h.preventDefault(), t.preventDefault())) : void this.T();\n        }\n\n        if (t.preventDefault(), p(\"client\", t, this.M), p(\"page\", t, this.F), this.o.dragImageTranslateOverride) try {\n          var n = !1;\n          if (this.o.dragImageTranslateOverride(t, {\n            x: this.M.x,\n            y: this.M.y\n          }, this.p, function (t, s) {\n            i._ && (n = !0, i.M.x += t, i.M.y += s, i.F.x += t, i.F.y += s, m(i._, i.F, i.L, i.P, i.o.dragImageCenterOnTouch));\n          }), n) return;\n        } catch (t) {}\n        m(this._, this.F, this.L, this.P, this.o.dragImageCenterOnTouch);\n      }\n    }, t.prototype.k = function (t) {\n      if (!1 !== v(t, this.I.identifier)) {\n        if (this.o.dragImageTranslateOverride) try {\n          this.o.dragImageTranslateOverride(void 0, void 0, void 0, function () {});\n        } catch (t) {}\n        0 !== this.v ? (t.preventDefault(), this.v = \"touchcancel\" === t.type ? 3 : 2) : this.T();\n      }\n    }, t.prototype.Y = function () {\n      var t = this,\n          n = this.O;\n      this.D.mode = 3, this.N.dropEffect = o[0];\n      var h = w(\"drag\", this.u, this.m, this.D, this.N);\n      if (h && (this.O = o[0]), h || 2 === this.v || 3 === this.v) return this.q(this.v) ? void function (t, i, n, h) {\n        var e = getComputedStyle(t);\n\n        if (\"hidden\" !== e.visibility && \"none\" !== e.display) {\n          i.classList.add(s);\n          var r = getComputedStyle(i),\n              o = parseFloat(r.transitionDuration);\n          if (isNaN(o) || 0 === o) h();else {\n            var u = t.getBoundingClientRect(),\n                a = {\n              x: u.left,\n              y: u.top\n            };\n            a.x += document.body.scrollLeft || document.documentElement.scrollLeft, a.y += document.body.scrollTop || document.documentElement.scrollTop, a.x -= parseInt(e.marginLeft, 10), a.y -= parseInt(e.marginTop, 10);\n            var c = parseFloat(r.transitionDelay),\n                f = Math.round(1e3 * (o + c));\n            m(i, a, n, void 0, !1), setTimeout(h, f);\n          }\n        } else h();\n      }(this.u, this._, this.L, function () {\n        t.B();\n      }) : void this.B();\n      var e = this.o.elementFromPoint(this.M.x, this.M.y),\n          r = this.g;\n      e !== this.p && e !== this.g && (this.p = e, null !== this.g && (this.D.mode = 3, this.N.dropEffect = o[0], w(\"dragexit\", this.g, this.m, this.D, this.N, !1)), null === this.p ? this.g = this.p : (this.D.mode = 3, this.N.dropEffect = y(this.D.effectAllowed, this.u), w(\"dragenter\", this.p, this.m, this.D, this.N) ? (this.g = this.p, this.O = x(this.N.effectAllowed, this.N.dropEffect)) : this.p !== document.body && (this.g = document.body))), r !== this.g && a(r) && (this.D.mode = 3, this.N.dropEffect = o[0], w(\"dragleave\", r, this.m, this.D, this.N, !1, this.g)), a(this.g) && (this.D.mode = 3, this.N.dropEffect = y(this.D.effectAllowed, this.u), !1 === w(\"dragover\", this.g, this.m, this.D, this.N) ? this.O = o[0] : this.O = x(this.N.effectAllowed, this.N.dropEffect)), n !== this.O && this._.classList.remove(i + n);\n      var u = i + this.O;\n\n      this._.classList.add(u);\n    }, t.prototype.q = function (t) {\n      var i = this.O === o[0] || null === this.g || 3 === t;\n      return i ? a(this.g) && (this.D.mode = 3, this.N.dropEffect = o[0], w(\"dragleave\", this.g, this.m, this.D, this.N, !1)) : a(this.g) && (this.D.mode = 1, this.N.dropEffect = this.O, !0 === w(\"drop\", this.g, this.m, this.D, this.N) ? this.O = this.N.dropEffect : this.O = o[0]), i;\n    }, t.prototype.B = function () {\n      this.D.mode = 3, this.N.dropEffect = this.O, w(\"dragend\", this.u, this.m, this.D, this.N, !1), this.v = 2, this.T();\n    }, t;\n  }(),\n      C = {\n    iterationInterval: 150,\n    tryFindDraggableTarget: function (t) {\n      var i = t.target;\n\n      do {\n        if (!1 !== i.draggable) {\n          if (!0 === i.draggable) return i;\n          if (i.getAttribute && \"true\" === i.getAttribute(\"draggable\")) return i;\n        }\n      } while ((i = i.parentNode) && i !== document.body);\n    },\n    dragImageSetup: function (t) {\n      var i = t.cloneNode(!0);\n      return function t(i, s) {\n        if (1 === i.nodeType) {\n          for (var n = getComputedStyle(i), h = 0; h < n.length; h++) {\n            var e = n[h];\n            s.style.setProperty(e, n.getPropertyValue(e), n.getPropertyPriority(e));\n          }\n\n          if (s.style.pointerEvents = \"none\", s.removeAttribute(\"id\"), s.removeAttribute(\"class\"), s.removeAttribute(\"draggable\"), \"CANVAS\" === s.nodeName) {\n            var r = i,\n                o = s,\n                u = r.getContext(\"2d\").getImageData(0, 0, r.width, r.height);\n            o.getContext(\"2d\").putImageData(u, 0, 0);\n          }\n        }\n\n        if (i.hasChildNodes()) for (h = 0; h < i.childNodes.length; h++) t(i.childNodes[h], s.childNodes[h]);\n      }(t, i), i;\n    },\n    elementFromPoint: function (t, i) {\n      return document.elementFromPoint(t, i);\n    }\n  };\n\n  function S(t) {\n    if (!I) {\n      var i = C.tryFindDraggableTarget(t);\n      if (i) try {\n        I = new j(t, C, i, A);\n      } catch (i) {\n        throw A(C, t, 3), i;\n      }\n    }\n  }\n\n  function k(t) {\n    var i = t.target,\n        s = function (t) {\n      r.off(), o.off(), u.off(), a.off(), i && i.dispatchEvent(new CustomEvent(e, {\n        bubbles: !0,\n        cancelable: !0\n      })), clearTimeout(n);\n    };\n\n    i && i.dispatchEvent(new CustomEvent(h, {\n      bubbles: !0,\n      cancelable: !0\n    }));\n    var n = window.setTimeout(function () {\n      r.off(), o.off(), u.off(), a.off(), S(t);\n    }, C.holdToDrag),\n        r = l(i, \"touchend\", s),\n        o = l(i, \"touchcancel\", s),\n        u = l(i, \"touchmove\", s),\n        a = l(window, \"scroll\", s, !0);\n  }\n\n  function A(t, i, s) {\n    if (0 === s && t.defaultActionOverride) try {\n      t.defaultActionOverride(i), i.defaultPrevented;\n    } catch (t) {}\n    I = null;\n  }\n\n  t.polyfill = function (t) {\n    if (t && Object.keys(t).forEach(function (i) {\n      C[i] = t[i];\n    }), !C.forceApply) {\n      var i = (s = {\n        dragEvents: \"ondragstart\" in document.documentElement,\n        draggable: \"draggable\" in document.documentElement,\n        userAgentSupportingNativeDnD: void 0\n      }, n = !!window.chrome || /chrome/i.test(navigator.userAgent), s.userAgentSupportingNativeDnD = !(/iPad|iPhone|iPod|Android/.test(navigator.userAgent) || n && \"ontouchstart\" in document.documentElement), s);\n      if (i.userAgentSupportingNativeDnD && i.draggable && i.dragEvents) return !1;\n    }\n\n    var s, n;\n    return C.holdToDrag ? c(\"touchstart\", k, !1) : c(\"touchstart\", S, !1), !0;\n  }, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"sources":["internal/constants.ts","internal/dom-utils.ts","internal/feature-detection.ts","internal/drag-data-store.ts","internal/drag-utils.ts","internal/drag-operation-controller.ts","index.ts"],"names":["CLASS_PREFIX","CLASS_DRAG_IMAGE_SNAPBACK","EVENT_PREFIX","EVENT_DRAG_DRAGSTART_PENDING","EVENT_DRAG_DRAGSTART_CANCEL","ALLOWED_EFFECTS","DROP_EFFECTS","supportsPassive","supportsPassiveEventListener","object","tagName","ev","handler","passive","document","addEventListener","removeEventListener","el","event","capture","options","off","srcNode","dstNode","nodeType","cs","getComputedStyle","i","length","csName","style","setProperty","getPropertyValue","getPropertyPriority","pointerEvents","removeAttribute","nodeName","canvasSrc","canvasDst","canvasSrcImgData","getContext","getImageData","width","height","putImageData","hasChildNodes","childNodes","prepareNodeCopyAsDragImage","sourceNode","dragImage","cloneNode","array","reduce","s","v","touchEvent","touchIdentifier","changedTouches","identifier","coordinateProp","outPoint","pageXs","pageYs","touches","touch","push","x","average","y","TRANSFORM_CSS_VENDOR_PREFIXES","map","prefix","transform","replace","element","pnt","originalTransforms","offset","centerOnCoordinates","parseInt","offsetWidth","offsetHeight","translate","transformProp","sourceEl","dragImageTransforms","transitionEndCb","visibility","display","classList","add","csDragImage","durationInS","parseFloat","transitionDuration","isNaN","rect","getBoundingClientRect","left","top","body","scrollLeft","documentElement","scrollTop","marginLeft","marginTop","delayInS","transitionDelay","durationInMs","Math","round","translateElementToPoint","undefined","setTimeout","features","dragEvents","draggable","userAgentSupportingNativeDnD","isBlinkEngine","window","test","navigator","userAgent","supportsPassiveEventListeners","opts","Object","defineProperty","get","e","this","DataTransfer","_dropEffect","value","_dataStore","mode","indexOf","freeze","types","effectAllowed","_setDragImageHandler","type","data","Error","format","index","splice","image","target","getAttribute","parentNode","targetElement","cancelable","dataTransfer","relatedTarget","dndEvent","Event","bubbles","screenX","screenY","clientX","clientY","pageX","pageY","targetRect","offsetX","offsetY","dragEvent","dataStore","leaveEvt","createDragEventFromTouch","defaultView","cancelled","dispatchEvent","dropEffect","_initialEvent","_config","_sourceNode","_dragOperationEndedCb","_lastTouchEvent","_initialTouch","_touchMoveHandler","_onTouchMove","bind","_touchEndOrCancelHandler","_onTouchEndOrCancel","addDocumentListener","DragOperationController","_dragOperationState","_currentDragOperation","_dragDataStore","_currentHotspotCoordinates","_dragImagePageCoordinates","dragImageSrc","_dataTransfer","_this","_dragImageOffset","dispatchDragEvent","_cleanup","updateCentroidCoordinatesOfTouchesIn","dragImageSetup","_dragImageTransforms","position","zIndex","_dragImage","dragImageOffset","dragImageCenterOnTouch","appendChild","_iterationIntervalId","setInterval","_iterationLock","_dragAndDropProcessModelIteration","iterationInterval","clearInterval","removeDocumentListener","removeChild","isTouchIdentifierContainedInTouchEvent","startDrag","dragStartConditionOverride","_setup","preventDefault","dragImageTranslateOverride","handledDragImageTranslate_1","_immediateUserSelection","previousDragOperation","dragCancelled","_dragOperationEnded","applyDragImageSnapback","_finishDragOperation","newUserSelection","elementFromPoint","previousTargetElement","_currentDropTarget","determineDropEffect","determineDragOperation","isDOMElement","remove","currentDragOperationClass","state","dragFailed","config","tryFindDraggableTarget","activeDragOperation","dragTarget","dragOperationEnded","err","evt","end","cancel","move","scroll","onTouchstart","onReleasedItem","CustomEvent","clearTimeout","timer","holdToDrag","onEvt","defaultActionOverride","defaultPrevented","override","keys","forEach","key","forceApply","detectedFeatures","onDelayTouchstart"],"mappings":";;;;;;AAKO,MAAMA,CAAAA,GAAe,WAArB;AAAA,MAEMC,CAAAA,GAA4BD,CAAAA,GAAe,UAFjD;AAAA,MAMME,CAAAA,GAAe,WANrB;AAAA,MAOMC,CAAAA,GAA+BD,CAAAA,GAAe,mBAPpD;AAAA,MAQME,CAAAA,GAA8BF,CAAAA,GAAe,kBARnD;AAAA,MAuBMG,CAAAA,GAAAA,CAAoB,MAApBA,EAA4B,MAA5BA,EAAoC,UAApCA,EAAgD,UAAhDA,EAA4D,MAA5DA,EAAoE,UAApEA,EAAgF,MAAhFA,EAAwF,KAAxFA,CAvBN;AAAA,MAkCMC,CAAAA,GAAAA,CAAiB,MAAjBA,EAAyB,MAAzBA,EAAiC,MAAjCA,EAAyC,MAAzCA,CAlCN;;ACDP,MAAMC,CAAAA,GCuBN,YAAA;AAEI,QAAIoH,CAAAA,GAAAA,CAAgC,CAApC;;AAGA,QAAA;AACI,UAAIC,CAAAA,GAAOC,MAAAA,CAAOC,cAAPD,CAAOC,EAAPD,EAA2B,SAA3BA,EAA2B;AAClCE,QAAAA,GAAAA,EAAK,YAAA;AACDJ,UAAAA,CAAAA,GAAAA,CAAgC,CAAhCA;AAAgC;AAFF,OAA3BE,CAAX;AAKAN,MAAAA,MAAAA,CAAOxG,gBAAPwG,CAAyB,MAAzBA,EAAiC,IAAjCA,EAAuCK,CAAvCL;AAGJ,KATA,CASA,OAAOS,CAAP,EAAOA,CAGP;;AAAA,WAAOL,CAAP;ADxCoBnH,GCuBxB,EDvBA;;AAOA,WAAA,CAAA,CAA8BC,CAA9B,EAA8BA;AAC1B,WAAOA,CAAAA,IAAUA,CAAAA,CAAOC,OAAxB;AAGJ;;AAAA,WAAA,CAAA,CAAqCC,CAArC,EAAgDC,CAAhD,EAAuEC,CAAvE,EAAuEA;AAAAA,SAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GACnEC,QAAAA,CAASC,gBAATD,CAA2BH,CAA3BG,EAA+BF,CAA/BE,EAA+BF,CAAAA,CAASL,CAATK,IAASL;AAAoBM,MAAAA,OAAAA,EAASA;AAA7BN,KAAxCO,CADmED;AAIvE;;AAAA,WAAA,CAAA,CAAwCF,CAAxC,EAAmDC,CAAnD,EAAmDA;AAC/CE,IAAAA,QAAAA,CAASE,mBAATF,CAA8BH,CAA9BG,EAAkCF,CAAlCE;AAGJ;;AAAA,WAAA,CAAA,CAAsBG,CAAtB,EAAsCC,CAAtC,EAAoDN,CAApD,EAA2EO,CAA3E,EAA2EA;AAAAA,SAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA;AAEvE,QAAMC,CAAAA,GAAUb,CAAAA,GAAAA;AAAmBM,MAAAA,OAAAA,EAAAA,CAAS,CAA5BN;AAAkCY,MAAAA,OAAAA,EAASA;AAA3CZ,KAAAA,GAAsDY,CAAtE;AAIA,WAFAF,CAAAA,CAAGF,gBAAHE,CAAoBC,CAApBD,EAA2BL,CAA3BK,EAAoCG,CAApCH,GAAoCG;AAGhCC,MAAAA,GAAAA,EAAG,YAAA;AACCJ,QAAAA,CAAAA,CAAGD,mBAAHC,CAAuBC,CAAvBD,EAA8BL,CAA9BK,EAAuCG,CAAvCH;AAAuCG;AAJXA,KAEpC;AA8DJ;;AAAA,WAAA,CAAA,CAAkB+B,CAAlB,EAAkBA;AACd,WAAqB,MAAjBA,CAAAA,CAAMvB,MAAW,GACV,CADU,GAGduB,CAAAA,CAAMC,MAAND,CAAY,UAAaE,CAAb,EAAgBC,CAAhB,EAAgBA;AAC/B,aAAOA,CAAAA,GAAID,CAAX;AAAWA,KADRF,EAEH,CAFGA,IAEGA,CAAAA,CAAMvB,MALhB;AAQJ;;AAAA,WAAA,CAAA,CAAwD2B,CAAxD,EAA+EC,CAA/E,EAA+EA;AAC3E,SAAK,IAAI7B,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI4B,CAAAA,CAAWE,cAAXF,CAA0B3B,MAA9C,EAAsDD,CAAAA,EAAtD,EAA4D;AAExD,UADc4B,CAAAA,CAAWE,cAAXF,CAA2B5B,CAA3B4B,EACJG,UADIH,KACWC,CAAzB,EACI,OAAA,CAAO,CAAP;AAGR;;AAAA,WAAA,CAAO,CAAP;AAOJ;;AAAA,WAAA,CAAA,CAAsDG,CAAtD,EAAwFzC,CAAxF,EAA0G0C,CAA1G,EAA0GA;AAEtG,SADA,IAAMC,CAAAA,GAAAA,EAAN,EAAiCC,CAAAA,GAAAA,EAAjC,EACSnC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIT,CAAAA,CAAM6C,OAAN7C,CAAcU,MAAlC,EAA0CD,CAAAA,EAA1C,EAAgD;AAC5C,UAAMqC,CAAAA,GAAQ9C,CAAAA,CAAM6C,OAAN7C,CAAeS,CAAfT,CAAd;AACA2C,MAAAA,CAAAA,CAAOI,IAAPJ,CAAaG,CAAAA,CAAOL,CAAAA,GAAiB,GAAxBK,CAAbH,GACAC,CAAAA,CAAOG,IAAPH,CAAaE,CAAAA,CAAOL,CAAAA,GAAiB,GAAxBK,CAAbF,CADAD;AAGJD;;AAAAA,IAAAA,CAAAA,CAASM,CAATN,GAAaO,CAAAA,CAASN,CAATM,CAAbP,EACAA,CAAAA,CAASQ,CAATR,GAAaO,CAAAA,CAASL,CAATK,CADbP;AAKJ;;AAAA,MAAMS,CAAAA,GAAAA,CAAkC,EAAlCA,EAAsC,UAAtCA,CAAN;;AAiBA,WAAA,CAAA,CAAyCK,CAAzC,EAA8DC,CAA9D,EAAyEC,CAAzE,EAAsGC,CAAtG,EAAqHC,CAArH,EAAqHA;AAAAA,SAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA;AAEjH,QAAIZ,CAAAA,GAAIS,CAAAA,CAAIT,CAAZ;AAAA,QAAeE,CAAAA,GAAIO,CAAAA,CAAIP,CAAvB;AAEIS,IAAAA,CAAAA,KACAX,CAAAA,IAAKW,CAAAA,CAAOX,CAAZA,EACAE,CAAAA,IAAKS,CAAAA,CAAOT,CAFZS,CAAAA,EAKAC,CAAAA,KACAZ,CAAAA,IAAMa,QAAAA,CAAeL,CAAAA,CAAQM,WAAvBD,EAAoC,EAApCA,CAAAA,GAA2C,CAAjDb,EACAE,CAAAA,IAAMW,QAAAA,CAAeL,CAAAA,CAAQO,YAAvBF,EAAqC,EAArCA,CAAAA,GAA4C,CAFlDD,CALAD;;AAaJ,SAFA,IAAMK,CAAAA,GAAY,iBAAiBhB,CAAjB,GAAqB,KAArB,GAA6BE,CAA7B,GAAiC,QAAnD,EAESzC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI0C,CAAAA,CAA8BzC,MAAlD,EAA0DD,CAAAA,EAA1D,EAAgE;AAC5D,UAAMwD,CAAAA,GAAgBd,CAAAA,CAA+B1C,CAA/B0C,CAAAA,GAAqC,WAA3D;AACAK,MAAAA,CAAAA,CAAQ5C,KAAR4C,CAAeS,CAAfT,IAAiCQ,CAAAA,GAAY,GAAZA,GAAkBN,CAAAA,CAAoBjD,CAApBiD,CAAnDF;AAAuE/C;AEzI/E;;AAAA,MAAA,CAAA,GAAA,YAAA;AAwCI,aAAA,CAAA,CAAqB0G,CAArB,EACqBM,CADrB,EACqBA;AADAN,WAAAA,CAAAA,GAAAA,CAAAA,EACAM,KAAAA,CAAAA,GAAAA,CADAN,EAtCbJ,KAAAA,CAAAA,GAAqB3H,CAAAA,CAAY,CAAZA,CAsCR+H;AAgDzB;;AAAA,WApFIR,MAAAA,CAAAA,cAAAA,CAAWK,CAAAA,CAAAA,SAAXL,EAAWK,YAAXL,EAAWK;AAAAA,MAAAA,GAAAA,EAAXL,YAAAA;AACI,eAAOI,KAAKE,CAAZ;AAAYA,OADLD;AACKC,MAAAA,GAAAA,EAWhB,UAAuBC,CAAvB,EAAuBA;AACK,cAApBH,KAAKI,CAALJ,CAAgBK,IAAI,IACjBjI,CAAAA,CAAgBkI,OAAhBlI,CAAyB+H,CAAzB/H,IAAyB+H,CAAW,CADnB,KAEpBH,KAAKE,CAALF,GAAmBG,CAFC;AAEDA,OAfhBF;AAegBE,MAAAA,UAAAA,EAAAA,CAAAA,CAfhBF;AAegBE,MAAAA,YAAAA,EAAAA,CAAAA;AAfhBF,KAAXL,GAmBAA,MAAAA,CAAAA,cAAAA,CAAWK,CAAAA,CAAAA,SAAXL,EAAWK,OAAXL,EAAWK;AAAAA,MAAAA,GAAAA,EAAXL,YAAAA;AACI,YAAwB,MAApBI,KAAKI,CAALJ,CAAgBK,IAApB,EACI,OAAOT,MAAAA,CAAOW,MAAPX,CAAeI,KAAKI,CAALJ,CAAgBQ,KAA/BZ,CAAP;AAAsCY,OAFnCP;AAEmCO,MAAAA,UAAAA,EAAAA,CAAAA,CAFnCP;AAEmCO,MAAAA,YAAAA,EAAAA,CAAAA;AAFnCP,KAAXL,CAnBAA,EAyBAA,MAAAA,CAAAA,cAAAA,CAAWK,CAAAA,CAAAA,SAAXL,EAAWK,eAAXL,EAAWK;AAAAA,MAAAA,GAAAA,EAAXL,YAAAA;AACI,eAAOI,KAAKI,CAALJ,CAAgBS,aAAvB;AAAuBA,OADhBR;AACgBQ,MAAAA,GAAAA,EAG3B,UAA0BN,CAA1B,EAA0BA;AACE,cAApBH,KAAKI,CAALJ,CAAgBK,IAAI,IACjBjI,CAAAA,CAAgBkI,OAAhBlI,CAAyB+H,CAAzB/H,IAAyB+H,CAAW,CADnB,KAEpBH,KAAKI,CAALJ,CAAgBS,aAAhBT,GAAgCG,CAFZ;AAEYA,OAP7BF;AAO6BE,MAAAA,UAAAA,EAAAA,CAAAA,CAP7BF;AAO6BE,MAAAA,YAAAA,EAAAA,CAAAA;AAP7BF,KAAXL,CAzBAA,EAwCOK,CAAAA,CAAAA,SAAAA,CAAAA,OAAAA,GAAP,UAAgBU,CAAhB,EAA6BC,CAA7B,EAA6BA;AACzB,UAAwB,MAApBZ,KAAKI,CAALJ,CAAgBK,IAApB,EAA2D;AAEvD,YAAIM,CAAAA,CAAKL,OAALK,CAAc,GAAdA,IAAc,CAAS,CAA3B,EACI,MAAM,IAAIE,KAAJ,CAAW,kCAAX,CAAN;AAGJb,aAAKI,CAALJ,CAAgBY,IAAhBZ,CAAsBW,CAAtBX,IAA+BY,CAA/BZ,EAA+BY,CAEgB,CAFhBA,KAE3BZ,KAAKI,CAALJ,CAAgBQ,KAAhBR,CAAsBM,OAAtBN,CAA+BW,CAA/BX,CAF2BY,IAG3BZ,KAAKI,CAALJ,CAAgBQ,KAAhBR,CAAsBhE,IAAtBgE,CAA4BW,CAA5BX,CAHJA;AAGgCW;AAAAA,KAlDxCf,EAuDOK,CAAAA,CAAAA,SAAAA,CAAAA,OAAAA,GAAP,UAAgBU,CAAhB,EAAgBA;AACZ,UAAwB,MAApBX,KAAKI,CAALJ,CAAgBK,IAAI,IACG,MAApBL,KAAKI,CAALJ,CAAgBK,IADvB,EAEI,OAAOL,KAAKI,CAALJ,CAAgBY,IAAhBZ,CAAsBW,CAAtBX,KAAgC,EAAvC;AAAuC,KA1D/CJ,EA8DOK,CAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAAP,UAAkBa,CAAlB,EAAkBA;AACd,UAAwB,MAApBd,KAAKI,CAALJ,CAAgBK,IAApB,EAA2D;AAEvD,YAAIS,CAAAA,IAAUd,KAAKI,CAALJ,CAAgBY,IAAhBZ,CAAsBc,CAAtBd,CAAd,EAA+C;AAAA,iBACpCA,KAAKI,CAALJ,CAAgBY,IAAhBZ,CAAsBc,CAAtBd,CADoC;AAE3C,cAAIe,CAAAA,GAAQf,KAAKI,CAALJ,CAAgBQ,KAAhBR,CAAsBM,OAAtBN,CAA+Bc,CAA/Bd,CAAZ;AAIA,iBAAA,MAHIe,CAAAA,GAAAA,CAAS,CAATA,IACAf,KAAKI,CAALJ,CAAgBQ,KAAhBR,CAAsBgB,MAAtBhB,CAA8Be,CAA9Bf,EAAqC,CAArCA,CAEJ,CAAA;AAGJA;;AAAAA,aAAKI,CAALJ,CAAgBY,IAAhBZ,GAAgBY,EAAhBZ,EACAA,KAAKI,CAALJ,CAAgBQ,KAAhBR,GAAgBQ,EADhBR;AACgBQ;AAAAA,KA3ExBZ,EA+EOK,CAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GAAP,UAAqBgB,CAArB,EAAoChF,CAApC,EAA8CE,CAA9C,EAA8CA;AAClB,YAApB6D,KAAKI,CAALJ,CAAgBK,IAAI,IACpBL,KAAKU,CAALV,CAA2BiB,CAA3BjB,EAAkC/D,CAAlC+D,EAAqC7D,CAArC6D,CADoB;AACiB7D,KAjF7CyD,EAoFJ,CAAA;AAxFA,GAAA,EAAA;;ACiBA,WAAA,CAAA,CAAqCa,CAArC,EAA2D1F,CAA3D,EAA2DA;AAGvD,WAAK0F,CAAAA,GAkBDA,CAAAA,KAAkBrI,CAAAA,CAAe,CAAfA,CAAlBqI,GACOpI,CAAAA,CAAY,CAAZA,CADPoI,GAIoE,MAApEA,CAAAA,CAAcH,OAAdG,CAAuBrI,CAAAA,CAAe,CAAfA,CAAvBqI,CAAoE,IAAKA,CAAAA,KAAkBrI,CAAAA,CAAe,CAAfA,CAAvB,GAC7DC,CAAAA,CAAY,CAAZA,CAD6D,GAIA,MAApEoI,CAAAA,CAAcH,OAAdG,CAAuBrI,CAAAA,CAAe,CAAfA,CAAvBqI,CAAoE,GAC7DpI,CAAAA,CAAY,CAAZA,CAD6D,GAIpEoI,CAAAA,KAAkBrI,CAAAA,CAAe,CAAfA,CAAlBqI,GACOpI,CAAAA,CAAY,CAAZA,CADPoI,GAKGpI,CAAAA,CAAY,CAAZA,CAnCFoI,GAS2B,MAAxB1F,CAAAA,CAAWxB,QAAa,IAA2C,QAAxBwB,CAAAA,CAAYtC,OAA/B,GACjBJ,CAAAA,CAAY,CAAZA,CADiB,GAKrBA,CAAAA,CAAY,CAAZA,CAdX;AA2EJ;;AAAA,WAAA,CAAA,CAAmCgK,CAAnC,EACmChB,CADnC,EAEmC/F,CAFnC,EAGmCgH,CAHnC,EAImCf,CAJnC,EAKmCD,CALnC,EAMmCE,CANnC,EAMmCA;AAAAA,SADAF,CACAE,KADAF,CACAE,KADAF,CAAAA,GAAAA,CAAAA,CACAE,GADAF,KACAE,CADAF,KACAE,CADAF,KACAE,CAAAA,GAAAA,IADAF,CACAE;;AAgB/B,QAAMe,CAAAA,GA3DV,UAAmClB,CAAnC,EACmCtB,CADnC,EAEmCY,CAFnC,EAGmCW,CAHnC,EAImChC,CAJnC,EAKmCiC,CALnC,EAMmCC,CANnC,EAMmCA;AAAAA,WAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA;AAE/B,UAAMzF,CAAAA,GAAcgE,CAAAA,CAAEvE,cAAFuE,CAAkB,CAAlBA,CAApB;AAAA,UAEM0B,CAAAA,GAAqB,IAAIC,KAAJ,CAAWf,CAAX,EAAWA;AAClCgB,QAAAA,OAAAA,EAAAA,CAAS,CADyBhB;AAElCW,QAAAA,UAAAA,EAAYA;AAFsBX,OAAX,CAF3B;AAQCc,MAAAA,CAAAA,CAAiBF,YAAjBE,GAAgCF,CAAhCE,EACAA,CAAAA,CAAiBD,aAAjBC,GAAiCD,CADjCC,EAIAA,CAAAA,CAAiBG,OAAjBH,GAA2B1F,CAAAA,CAAM6F,OAJjCH,EAKAA,CAAAA,CAAiBI,OAAjBJ,GAA2B1F,CAAAA,CAAM8F,OALjCJ,EAMAA,CAAAA,CAAiBK,OAAjBL,GAA2B1F,CAAAA,CAAM+F,OANjCL,EAOAA,CAAAA,CAAiBM,OAAjBN,GAA2B1F,CAAAA,CAAMgG,OAPjCN,EAQAA,CAAAA,CAAiBO,KAAjBP,GAAyB1F,CAAAA,CAAMiG,KAR/BP,EASAA,CAAAA,CAAiBQ,KAAjBR,GAAyB1F,CAAAA,CAAMkG,KAT/BR;AAWD,UAAMS,CAAAA,GAAab,CAAAA,CAAcrD,qBAAdqD,EAAnB;AAIA,aAHCI,CAAAA,CAAiBU,OAAjBV,GAA2BA,CAAAA,CAASK,OAATL,GAAmBS,CAAAA,CAAWjE,IAAzDwD,EACAA,CAAAA,CAAiBW,OAAjBX,GAA2BA,CAAAA,CAASM,OAATN,GAAmBS,CAAAA,CAAWhE,GADzDuD,EAGMA,CAAP;AA4BiBe,KA3DrB,CA2D+CnB,CA3D/C,EA2D8D/F,CA3D9D,EA2D0E+G,CA3D1E,EA2DqFf,CA3DrF,EA2DiGzI,QAAAA,CAAS4J,WA3D1G,EA2DuHlB,CA3DvH,EA2DqIC,CA3DrI,CA2DI;AAAA,QACMkB,CAAAA,GAAAA,CAAarB,CAAAA,CAAcsB,aAAdtB,CAA6BkB,CAA7BlB,CADnB;;AAcA,WAXAiB,CAAAA,CAAUjC,IAAViC,GAAc,CAAdA,EAWOI,CAAP;AAMJ;;AAAA,WAAA,CAAA,CAAwCjC,CAAxC,EAA8DmC,CAA9D,EAA8DA;AAG1D,QAAA,CAAKnC,CAAL,IAAsBA,CAAAA,KAAkBrI,CAAAA,CAAiB,CAAjBA,CAAxC,EACI,OAAOwK,CAAP;;AAGJ,QAAIA,CAAAA,KAAevK,CAAAA,CAAY,CAAZA,CAAnB,EAA+B;AAC3B,UAAkE,MAA9DoI,CAAAA,CAAcH,OAAdG,CAAuBpI,CAAAA,CAAY,CAAZA,CAAvBoI,CAAJ,EACI,OAAOpI,CAAAA,CAAY,CAAZA,CAAP;AAAmB,KAF3B,MAKK,IAAIuK,CAAAA,KAAevK,CAAAA,CAAY,CAAZA,CAAnB,EAA+B;AAChC,UAAkE,MAA9DoI,CAAAA,CAAcH,OAAdG,CAAuBpI,CAAAA,CAAY,CAAZA,CAAvBoI,CAA8D,IAAKA,CAAAA,CAAcH,OAAdG,CAAuB,MAAvBA,IAAuB,CAAY,CAA1G,EACI,OAAOpI,CAAAA,CAAY,CAAZA,CAAP;AAAmB,KAFtB,MAKA,IAAIuK,CAAAA,KAAevK,CAAAA,CAAY,CAAZA,CAAfuK,KAC6D,MAA9DnC,CAAAA,CAAcH,OAAdG,CAAuBpI,CAAAA,CAAY,CAAZA,CAAvBoI,CAA8D,IAAKA,CAAAA,CAAcH,OAAdG,CAAuB,MAAvBA,IAAuB,CAAY,CADrGmC,CAAJ,EAEG,OAAOvK,CAAAA,CAAY,CAAZA,CAAP;;AAIR,WAAOA,CAAAA,CAAY,CAAZA,CAAP;ACzJJ;;AAAA,MCjBI2O,CDiBJ;AAAA,MAAA,CAAA,GAAA,YAAA;AA2BI,aAAA,CAAA,CAAqBnE,CAArB,EACqBC,CADrB,EAEqBC,CAFrB,EAGqBC,CAHrB,EAGqBA;AAHAH,WAAAA,CAAAA,GAAAA,CAAAA,EACAC,KAAAA,CAAAA,GAAAA,CADAD,EAEAE,KAAAA,CAAAA,GAAAA,CAFAF,EAGAG,KAAAA,CAAAA,GAAAA,CAHAH,EAzBb7C,KAAAA,CAAAA,GAAmB,CAyBN6C,EAhBb7C,KAAAA,CAAAA,GAAsC,IAgBzB6C,EAfb7C,KAAAA,CAAAA,GAAiC,IAepB6C,EAOjB7C,KAAKiD,CAALjD,GAAuB6C,CAPNA,EAQjB7C,KAAKkD,CAALlD,GAAqB6C,CAAAA,CAAcrH,cAAdqH,CAA8B,CAA9BA,CARJA,EAWjB7C,KAAKmD,CAALnD,GAAyBA,KAAKoD,CAALpD,CAAkBqD,IAAlBrD,CAAwBA,IAAxBA,CAXR6C,EAYjB7C,KAAKsD,CAALtD,GAAgCA,KAAKuD,CAALvD,CAAyBqD,IAAzBrD,CAA+BA,IAA/BA,CAZf6C,EAajBW,CAAAA,CAAqB,WAArBA,EAAkCxD,KAAKmD,CAAvCK,EAAuCL,CAAmB,CAA1DK,CAbiBX,EAcjBW,CAAAA,CAAqB,UAArBA,EAAiCxD,KAAKsD,CAAtCE,EAAsCF,CAA0B,CAAhEE,CAdiBX,EAejBW,CAAAA,CAAqB,aAArBA,EAAoCxD,KAAKsD,CAAzCE,EAAyCF,CAA0B,CAAnEE,CAfiBX;AAuuBzB;;AAAA,WAhqBYY,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,YAAA;AAAA,UAAA,CAAA,GAAA,IAAA;AAGIzD,WAAK0D,CAAL1D,GAAwB,CAAxBA,EAEAA,KAAK2D,CAAL3D,GAA6B3H,CAAAA,CAAY,CAAZA,CAF7B2H,EAIAA,KAAK4D,CAAL5D,GAAK4D;AACDhD,QAAAA,IAAAA,EAAAA,EADCgD;AAEDnD,QAAAA,aAAAA,EAAAA,KAAe1B,CAFd6E;AAGDvD,QAAAA,IAAAA,EAAI,CAHHuD;AAIDpD,QAAAA,KAAAA,EAAAA;AAJCoD,OAJL5D,EAWAA,KAAK6D,CAAL7D,GAAK6D;AACD5H,QAAAA,CAAAA,EAAG,IADF4H;AAED1H,QAAAA,CAAAA,EAAG;AAFF0H,OAXL7D,EAgBAA,KAAK8D,CAAL9D,GAAK8D;AACD7H,QAAAA,CAAAA,EAAG,IADF6H;AAED3H,QAAAA,CAAAA,EAAG;AAFF2H,OAhBL9D;AAqBA,UAAI+D,CAAAA,GAA2B/D,KAAK+C,CAApC;AAiBA,UAfA/C,KAAKgE,CAALhE,GAAqB,IAAIC,CAAJ,CAAkBD,KAAK4D,CAAvB,EAAuC,UAAEnH,CAAF,EAAuBR,CAAvB,EAAiCE,CAAjC,EAAiCA;AAEzF4H,QAAAA,CAAAA,GAAetH,CAAfsH,EAEiB,YAAA,OAAN9H,CAAM,IAAyB,YAAA,OAANE,CAAnB,KACb8H,CAAAA,CAAKC,CAALD,GAAKC;AACDjI,UAAAA,CAAAA,EAAGA,CAAAA,IAAK,CADPiI;AAED/H,UAAAA,CAAAA,EAAGA,CAAAA,IAAK;AAFP+H,SADQ,CAFjBH;AAKgB,OAPC,CAArB/D,EAaAA,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAbxBA,EAcAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgC3H,CAAAA,CAAY,CAAZA,CAdhC2H,EAeImE,CAAAA,CAAmB,WAAnBA,EAAgCnE,KAAK+C,CAArCoB,EAAkDnE,KAAKiD,CAAvDkB,EAAwEnE,KAAK4D,CAA7EO,EAA6FnE,KAAKgE,CAAlGG,CAAJ,EAKI,OAFAnE,KAAK0D,CAAL1D,GAAwB,CAAxBA,EACAA,KAAKoE,CAALpE,EADAA,EACKoE,CACE,CAAP;AAGJC,MAAAA,CAAAA,CAAsC,MAAtCA,EAA8CrE,KAAKiD,CAAnDoB,EAAoErE,KAAK8D,CAAzEO,CAAAA;AACA,UJpDgCtJ,CIoDhC;AAAA,UAAMC,CAAAA,GAAYgF,KAAK8C,CAAL9C,CAAasE,cAAbtE,CAA6B+D,CAA7B/D,CAAlB;AAcA,UAbAA,KAAKuE,CAALvE,IJrDgCjF,CAAAA,GIqDoBC,CJrDpBD,EAE7BqB,CAAAA,CAA8BC,GAA9BD,CAAmC,UAAUE,CAAV,EAAUA;AAEhD,YAAIC,CAAAA,GAAYxB,CAAAA,CAAWlB,KAAXkB,CAAkBuB,CAAAA,GAAS,WAA3BvB,CAAhB;AAEA,eAAKwB,CAAAA,IAA2B,WAAdA,CAAbA,GAKEA,CAAAA,CAAUC,OAAVD,CAAmB,0CAAnBA,EAA+D,EAA/DA,CALFA,GACM,EADX;AACW,OALRH,CImDH4D,GAEAhF,CAAAA,CAAUnB,KAAVmB,CAAgBwJ,QAAhBxJ,GAA2B,UAF3BgF,EAGAhF,CAAAA,CAAUnB,KAAVmB,CAAgBiD,IAAhBjD,GAAuB,KAHvBgF,EAIAhF,CAAAA,CAAUnB,KAAVmB,CAAgBkD,GAAhBlD,GAAsB,KAJtBgF,EAMAhF,CAAAA,CAAUnB,KAAVmB,CAAgByJ,MAAhBzJ,GAAyB,QANzBgF,EASAhF,CAAAA,CAAUwC,SAAVxC,CAAoByC,GAApBzC,CLxLwBjD,qBKwLxBiD,CATAgF,EAUAhF,CAAAA,CAAUwC,SAAVxC,CAAoByC,GAApBzC,CLvLiCjD,eKuLjCiD,CAVAgF,EAWAA,KAAK0E,CAAL1E,GAAkBhF,CAXlBgF,EAWkBhF,CAEbgF,KAAKkE,CAAV,EAGI,IAAIlE,KAAK8C,CAAL9C,CAAa2E,eAAjB,EAEI3E,KAAKkE,CAALlE,GAAKkE;AACDjI,QAAAA,CAAAA,EAAG+D,KAAK8C,CAAL9C,CAAa2E,eAAb3E,CAA6B/D,CAD/BiI;AAED/H,QAAAA,CAAAA,EAAG6D,KAAK8C,CAAL9C,CAAa2E,eAAb3E,CAA6B7D;AAF/B+H,OAALlE,CAFJ,KAQK,IAAIA,KAAK8C,CAAL9C,CAAa4E,sBAAjB,EAA0C;AAE3C,YAAMpL,CAAAA,GAAKC,gBAAAA,CAAkBsK,CAAlBtK,CAAX;AACAuG,aAAKkE,CAALlE,GAAKkE;AACDjI,UAAAA,CAAAA,EAAG,IAAIa,QAAAA,CAAUtD,CAAAA,CAAG+E,UAAbzB,EAAyB,EAAzBA,CADNoH;AAED/H,UAAAA,CAAAA,EAAG,IAAIW,QAAAA,CAAUtD,CAAAA,CAAGgF,SAAb1B,EAAwB,EAAxBA;AAFNoH,SAALlE;AAEmC,OALlC,MASA;AAED,YAAMkC,CAAAA,GAAa6B,CAAAA,CAAa/F,qBAAb+F,EAAnB;AACMvK,QAAAA,CAAAA,GAAKC,gBAAAA,CAAkBsK,CAAlBtK,CAALD;AACNwG,aAAKkE,CAALlE,GAAKkE;AACDjI,UAAAA,CAAAA,EAAGiG,CAAAA,CAAWjE,IAAXiE,GAAkBlC,KAAKkD,CAALlD,CAAmB8B,OAArCI,GAA+CpF,QAAAA,CAAUtD,CAAAA,CAAG+E,UAAbzB,EAAyB,EAAzBA,CAA/CoF,GAA+EA,CAAAA,CAAWzH,KAAXyH,GAAmB,CADpGgC;AAED/H,UAAAA,CAAAA,EAAG+F,CAAAA,CAAWhE,GAAXgE,GAAiBlC,KAAKkD,CAALlD,CAAmB+B,OAApCG,GAA8CpF,QAAAA,CAAUtD,CAAAA,CAAGgF,SAAb1B,EAAwB,EAAxBA,CAA9CoF,GAA6EA,CAAAA,CAAWxH,MAAXwH,GAAoB;AAFnGgC,SAALlE;AA0BR;AAAA,aAnBAlB,CAAAA,CAAyBkB,KAAK0E,CAA9B5F,EAA0CkB,KAAK8D,CAA/ChF,EAA0EkB,KAAKuE,CAA/EzF,EAAqGkB,KAAKkE,CAA1GpF,EAA4HkB,KAAK8C,CAAL9C,CAAa4E,sBAAzI9F,CAAAA,EACAjG,QAAAA,CAASsF,IAATtF,CAAcgM,WAAdhM,CAA2BmH,KAAK0E,CAAhC7L,CADAiG,EAIAkB,KAAK8E,CAAL9E,GAA4BV,MAAAA,CAAOyF,WAAPzF,CAAoB,YAAA;AAIxC2E,QAAAA,CAAAA,CAAKe,CAALf,KAIJA,CAAAA,CAAKe,CAALf,GAAKe,CAAiB,CAAtBf,EAEAA,CAAAA,CAAKgB,CAALhB,EAFAA,EAIAA,CAAAA,CAAKe,CAALf,GAAKe,CAAiB,CARlBf;AAQkB,OAZE3E,EAazBU,KAAK8C,CAAL9C,CAAakF,iBAbY5F,CAJ5BR,EAiBgBoG,CAET,CAAP;AAAO,KAlHHzB,EAqHAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,YAAA;AAIQzD,WAAK8E,CAAL9E,KACAmF,aAAAA,CAAenF,KAAK8E,CAApBK,CAAAA,EACAnF,KAAK8E,CAAL9E,GAA4B,IAF5BA,GAKJoF,CAAAA,CAAwB,WAAxBA,EAAqCpF,KAAKmD,CAA1CiC,CALIpF,EAMJoF,CAAAA,CAAwB,UAAxBA,EAAoCpF,KAAKsD,CAAzC8B,CANIpF,EAOJoF,CAAAA,CAAwB,aAAxBA,EAAuCpF,KAAKsD,CAA5C8B,CAPIpF,EASAA,KAAK0E,CAAL1E,KACAA,KAAK0E,CAAL1E,CAAgBoB,UAAhBpB,CAA2BqF,WAA3BrF,CAAwCA,KAAK0E,CAA7C1E,GACAA,KAAK0E,CAAL1E,GAAkB,IAFlBA,CATAA,EAcJA,KAAKgD,CAALhD,CAA4BA,KAAK8C,CAAjC9C,EAA0CA,KAAKiD,CAA/CjD,EAAgEA,KAAK0D,CAArE1D,CAdIA;AAciE0D,KAvIjED,EA8IAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,UAAsBxK,CAAtB,EAAsBA;AAAtB,UAAA,CAAA,GAAA,IAAA;;AAGI,UAAA,CAAuF,CAAvF,KAAIqM,CAAAA,CAAwCrM,CAAxCqM,EAA+CtF,KAAKkD,CAALlD,CAAmBvE,UAAlE6J,CAAJ,EAAA;AAQA,YAHAtF,KAAKiD,CAALjD,GAAuB/G,CAAvB+G,EAG4B,MAAxBA,KAAK0D,CAAT,EAAgE;AAE5D,cAAI6B,CAAAA,GAAAA,KAAS,CAAb;AAGA,cAAIvF,KAAK8C,CAAL9C,CAAawF,0BAAjB,EAEI,IAAA;AACID,YAAAA,CAAAA,GAAYvF,KAAK8C,CAAL9C,CAAawF,0BAAbxF,CAAyC/G,CAAzC+G,CAAZuF;AAEJ,WAHA,CAGA,OAAOxF,CAAP,EAAOA;AAEHwF,YAAAA,CAAAA,GAAAA,CAAY,CAAZA;AAAY,WAPpB,MAaIA,CAAAA,GAAsC,MAAzBtM,CAAAA,CAAM6C,OAAN7C,CAAcU,MAA3B4L;AAGJ,iBAAKA,CAAAA,GAAAA,MAAAA,CAOiB,CAPjBA,KAODvF,KAAKyF,CAALzF,EAPCuF,KAUDvF,KAAK6C,CAAL7C,CAAmB0F,cAAnB1F,IACA/G,CAAAA,CAAMyM,cAANzM,EAXCsM,CAAAA,CAAAA,GAWKG,KATN1F,KAAKoE,CAALpE,EAFJ;AA0BJ;;AAAA,YANA/G,CAAAA,CAAMyM,cAANzM,IAGAoL,CAAAA,CAAsC,QAAtCA,EAAgDpL,CAAhDoL,EAAuDrE,KAAK6D,CAA5DQ,CAHApL,EAIAoL,CAAAA,CAAsC,MAAtCA,EAA8CpL,CAA9CoL,EAAqDrE,KAAK8D,CAA1DO,CAJApL,EAMI+G,KAAK8C,CAAL9C,CAAa2F,0BAAjB,EAEI,IAAA;AAEI,cAAIC,CAAAA,GAAAA,CAA4B,CAAhC;AAiCA,cA/BA5F,KAAK8C,CAAL9C,CAAa2F,0BAAb3F,CACI/G,CADJ+G,EACI/G;AAEIgD,YAAAA,CAAAA,EAAG+D,KAAK6D,CAAL7D,CAAgC/D,CAFvChD;AAGIkD,YAAAA,CAAAA,EAAG6D,KAAK6D,CAAL7D,CAAgC7D;AAHvClD,WADJ+G,EAMIA,KAAK6F,CANT7F,EAOI,UAAEmC,CAAF,EAAkBC,CAAlB,EAAkBA;AAGT6B,YAAAA,CAAAA,CAAKS,CAALT,KAIL2B,CAAAA,GAAAA,CAA4B,CAA5BA,EAEA3B,CAAAA,CAAKJ,CAALI,CAAgChI,CAAhCgI,IAAqC9B,CAFrCyD,EAGA3B,CAAAA,CAAKJ,CAALI,CAAgC9H,CAAhC8H,IAAqC7B,CAHrCwD,EAIA3B,CAAAA,CAAKH,CAALG,CAA+BhI,CAA/BgI,IAAoC9B,CAJpCyD,EAKA3B,CAAAA,CAAKH,CAALG,CAA+B9H,CAA/B8H,IAAoC7B,CALpCwD,EAOA9G,CAAAA,CACImF,CAAAA,CAAKS,CADT5F,EAEImF,CAAAA,CAAKH,CAFThF,EAGImF,CAAAA,CAAKM,CAHTzF,EAIImF,CAAAA,CAAKC,CAJTpF,EAKImF,CAAAA,CAAKnB,CAALmB,CAAaW,sBALjB9F,CAXKmF;AAgBYW,WA1BzB5E,GA+BI4F,CAAJ,EACI;AAGR,SAvCA,CAuCA,OAAO7F,CAAP,EAAOA,CAKXjB;AAAAA,QAAAA,CAAAA,CAAyBkB,KAAK0E,CAA9B5F,EAA0CkB,KAAK8D,CAA/ChF,EAA0EkB,KAAKuE,CAA/EzF,EAAqGkB,KAAKkE,CAA1GpF,EAA4HkB,KAAK8C,CAAL9C,CAAa4E,sBAAzI9F,CAAAA;AAAyI8F;AAAAA,KAtPrInB,EAyPAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,UAA6BxK,CAA7B,EAA6BA;AAGzB,UAAA,CAAuF,CAAvF,KAAIqM,CAAAA,CAAwCrM,CAAxCqM,EAA+CtF,KAAKkD,CAALlD,CAAmBvE,UAAlE6J,CAAJ,EAAA;AAKA,YAAItF,KAAK8C,CAAL9C,CAAa2F,0BAAjB,EACI,IAAA;AAEI3F,eAAK8C,CAAL9C,CAAa2F,0BAAb3F,CAAa2F,KAA4B5G,CAAzCiB,EAAyCjB,KAAWA,CAApDiB,EAAoDjB,KAAWA,CAA/DiB,EAA0E,YAAA,CAAA,CAA1EA;AAGJ,SALA,CAKA,OAAOD,CAAP,EAAOA,CAMiB;AAAA,cAAxBC,KAAK0D,CAAmB,IAM5BzK,CAAAA,CAAMyM,cAANzM,IAEA+G,KAAK0D,CAAL1D,GAA2C,kBAAf/G,CAAAA,CAAM0H,IAAS,GAAa,CAAb,GAAa,CAR5B,IACxBX,KAAKoE,CAALpE,EADwB;AACnBoE;AAAAA,KA9QLX,EA+RAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,YAAA;AAAA,UAAA,CAAA,GAAA,IAAA;AAAA,UAQUqC,CAAAA,GAAwB9F,KAAK2D,CARvC;AAWI3D,WAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgC3H,CAAAA,CAAY,CAAZA,CADhC2H;AAEA,UAAM+F,CAAAA,GAAgB5B,CAAAA,CAAmB,MAAnBA,EAA2BnE,KAAK+C,CAAhCoB,EAA6CnE,KAAKiD,CAAlDkB,EAAmEnE,KAAK4D,CAAxEO,EAAwFnE,KAAKgE,CAA7FG,CAAtB;AASA,UARI4B,CAAAA,KAGA/F,KAAK2D,CAAL3D,GAA6B3H,CAAAA,CAAY,CAAZA,CAH7B0N,CAAAA,EAQAA,CAAAA,IAAyC,MAAxB/F,KAAK0D,CAAtBqC,IAAkG,MAAxB/F,KAAK0D,CAAnF,EAKI,OAHmB1D,KAAKgG,CAALhG,CAA0BA,KAAK0D,CAA/B1D,IAA+B0D,KJ/Q9D,UAAwCvG,CAAxC,EAA8DnC,CAA9D,EAAqFoC,CAArF,EAAmHC,CAAnH,EAAmHA;AAE/G,YAAM7D,CAAAA,GAAKC,gBAAAA,CAAkB0D,CAAlB1D,CAAX;;AAEA,YAAsB,aAAlBD,CAAAA,CAAG8D,UAAe,IAA2B,WAAf9D,CAAAA,CAAG+D,OAArC,EAAA;AAOAvC,UAAAA,CAAAA,CAAUwC,SAAVxC,CAAoByC,GAApBzC,CAAyBhD,CAAzBgD;AAEA,cAAM0C,CAAAA,GAAcjE,gBAAAA,CAAkBuB,CAAlBvB,CAApB;AAAA,cACMkE,CAAAA,GAAcC,UAAAA,CAAYF,CAAAA,CAAYG,kBAAxBD,CADpB;AAEA,cAAIE,KAAAA,CAAOH,CAAPG,CAAAA,IAAwC,MAAhBH,CAA5B,EAEIN,CAAAA,GAFJ,KAAA;AASA,gBAAMU,CAAAA,GAAOZ,CAAAA,CAASa,qBAATb,EAAb;AAAA,gBAEMT,CAAAA,GAAAA;AACFT,cAAAA,CAAAA,EAAG8B,CAAAA,CAAKE,IADNvB;AAEFP,cAAAA,CAAAA,EAAG4B,CAAAA,CAAKG;AAFNxB,aAFN;AAQAA,YAAAA,CAAAA,CAAIT,CAAJS,IAAU7D,QAAAA,CAASsF,IAATtF,CAAcuF,UAAdvF,IAA4BA,QAAAA,CAASwF,eAATxF,CAAyBuF,UAA/D1B,EACAA,CAAAA,CAAIP,CAAJO,IAAU7D,QAAAA,CAASsF,IAATtF,CAAcyF,SAAdzF,IAA2BA,QAAAA,CAASwF,eAATxF,CAAyByF,SAD9D5B,EAIAA,CAAAA,CAAIT,CAAJS,IAASI,QAAAA,CAAUtD,CAAAA,CAAG+E,UAAbzB,EAAyB,EAAzBA,CAJTJ,EAKAA,CAAAA,CAAIP,CAAJO,IAASI,QAAAA,CAAUtD,CAAAA,CAAGgF,SAAb1B,EAAwB,EAAxBA,CALTJ;AAOA,gBAAM+B,CAAAA,GAAWb,UAAAA,CAAYF,CAAAA,CAAYgB,eAAxBd,CAAjB;AAAA,gBACMe,CAAAA,GAAeC,IAAAA,CAAKC,KAALD,CAAuC,OAA1BjB,CAAAA,GAAcc,CAAY,CAAvCG,CADrB;AAIAE,YAAAA,CAAAA,CAAyB9D,CAAzB8D,EAAoCpC,CAApCoC,EAAyC1B,CAAzC0B,EAAyC1B,KAAqB2B,CAA9DD,EAA8DC,CAAW,CAAzED,CAAAA,EAEAE,UAAAA,CAAY3B,CAAZ2B,EAA6BL,CAA7BK,CAFAF;AAE6BH;AAAAA,SAzC7B,MAGItB,CAAAA;AI6QQ4I,OJpRhB,CIoRwCjG,KAAK+C,CJpR7C,EIoR0D/C,KAAK0E,CJpR/D,EIoR2E1E,KAAKuE,CJpRhF,EIoRsG,YAAA;AAClFN,QAAAA,CAAAA,CAAKiC,CAALjC;AAAKiC,OJrRzB,CI+Q+BlG,GAMNkG,KAOblG,KAAKkG,CAALlG,EAVA;AAgBJ,UAAMmG,CAAAA,GAA4CnG,KAAK8C,CAAL9C,CAAaoG,gBAAbpG,CAA+BA,KAAK6D,CAAL7D,CAAgC/D,CAA/D+D,EAAkEA,KAAK6D,CAAL7D,CAAgC7D,CAAlG6D,CAAlD;AAAA,UAIMqG,CAAAA,GAAwBrG,KAAKsG,CAJnC;AAUIH,MAAAA,CAAAA,KAAqBnG,KAAK6F,CAA1BM,IAAqDA,CAAAA,KAAqBnG,KAAKsG,CAA/EH,KAcAnG,KAAK6F,CAAL7F,GAA+BmG,CAA/BnG,EAEgC,SAA5BA,KAAKsG,CAAuB,KAC5BtG,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgC3H,CAAAA,CAAY,CAAZA,CADhC2H,EAEAmE,CAAAA,CAAmB,UAAnBA,EAA+BnE,KAAKsG,CAApCnC,EAAwDnE,KAAKiD,CAA7DkB,EAA8EnE,KAAK4D,CAAnFO,EAAmGnE,KAAKgE,CAAxGG,EAAwGH,CAAe,CAAvHG,CAH4B,CAFhCnE,EASqC,SAAjCA,KAAK6F,CAA4B,GAEjC7F,KAAKsG,CAALtG,GAA0BA,KAAK6F,CAFE,IAkBjC7F,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgCuG,CAAAA,CAAqBvG,KAAK4D,CAAL5D,CAAoBS,aAAzC8F,EAAwDvG,KAAK+C,CAA7DwD,CADhCvG,EAEImE,CAAAA,CAAmB,WAAnBA,EAAgCnE,KAAK6F,CAArC1B,EAA8DnE,KAAKiD,CAAnEkB,EAAoFnE,KAAK4D,CAAzFO,EAAyGnE,KAAKgE,CAA9GG,CAAAA,IAGAnE,KAAKsG,CAALtG,GAA0BA,KAAK6F,CAA/B7F,EACAA,KAAK2D,CAAL3D,GAA6BwG,CAAAA,CAAwBxG,KAAKgE,CAALhE,CAAmBS,aAA3C+F,EAA0DxG,KAAKgE,CAALhE,CAAmB4C,UAA7E4D,CAJ7BrC,IA2CInE,KAAK6F,CAAL7F,KAAiCnH,QAAAA,CAASsF,IAA1C6B,KASAA,KAAKsG,CAALtG,GAA0BnH,QAAAA,CAASsF,IATnC6B,CA/DyB,CAvBrCmG,GA4GAE,CAAAA,KAA0BrG,KAAKsG,CAA/BD,IAAsDI,CAAAA,CAAcJ,CAAdI,CAAtDJ,KAQArG,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgC3H,CAAAA,CAAY,CAAZA,CADhC2H,EAEAmE,CAAAA,CAAmB,WAAnBA,EAAgCkC,CAAhClC,EAAuDnE,KAAKiD,CAA5DkB,EAA6EnE,KAAK4D,CAAlFO,EAAkGnE,KAAKgE,CAAvGG,EAAuGH,CAAe,CAAtHG,EAA6HnE,KAAKsG,CAAlInC,CAVAkC,CA5GAF,EA0HAM,CAAAA,CAAczG,KAAKsG,CAAnBG,CAAAA,KAQAzG,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgCuG,CAAAA,CAAqBvG,KAAK4D,CAAL5D,CAAoBS,aAAzC8F,EAAwDvG,KAAK+C,CAA7DwD,CADhCvG,EAC6F+C,CACmC,CADnCA,KACzFoB,CAAAA,CAAmB,UAAnBA,EAA+BnE,KAAKsG,CAApCnC,EAAwDnE,KAAKiD,CAA7DkB,EAA8EnE,KAAK4D,CAAnFO,EAAmGnE,KAAKgE,CAAxGG,CADyFpB,GAmBzF/C,KAAK2D,CAAL3D,GAA6B3H,CAAAA,CAAY,CAAZA,CAnB4D0K,GA2BzF/C,KAAK2D,CAAL3D,GAA6BwG,CAAAA,CAAwBxG,KAAKgE,CAALhE,CAAmBS,aAA3C+F,EAA0DxG,KAAKgE,CAALhE,CAAmB4C,UAA7E4D,CApCjCC,CA1HAN,EAiLAL,CAAAA,KAA0B9F,KAAK2D,CAA/BmC,IACA9F,KAAK0E,CAAL1E,CAAgBxC,SAAhBwC,CAA0B0G,MAA1B1G,CAAkCjI,CAAAA,GAAe+N,CAAjD9F,CAlLAmG;AAqLJ,UAAMQ,CAAAA,GAA4B5O,CAAAA,GAAeiI,KAAK2D,CAAtD;;AAEA3D,WAAK0E,CAAL1E,CAAgBxC,SAAhBwC,CAA0BvC,GAA1BuC,CAA+B2G,CAA/B3G;AAA+B2G,KA3gB3BlD,EAihBAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,UAA6BmD,CAA7B,EAA6BA;AAyBzB,UAAMC,CAAAA,GAAc7G,KAAK2D,CAAL3D,KAA+B3H,CAAAA,CAAY,CAAZA,CAA/B2H,IACe,SAA5BA,KAAKsG,CADQtG,IAER,MAAL4G,CAFP;AAoEA,aAjEIC,CAAAA,GAQIJ,CAAAA,CAAczG,KAAKsG,CAAnBG,CAAAA,KACAzG,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgC3H,CAAAA,CAAY,CAAZA,CADhC2H,EAEAmE,CAAAA,CAAmB,WAAnBA,EAAgCnE,KAAKsG,CAArCnC,EAAyDnE,KAAKiD,CAA9DkB,EAA+EnE,KAAK4D,CAApFO,EAAoGnE,KAAKgE,CAAzGG,EAAyGH,CAAe,CAAxHG,CAHAsC,CARJI,GA0BIJ,CAAAA,CAAczG,KAAKsG,CAAnBG,CAAAA,KAKAzG,KAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgCA,KAAK2D,CADrC3D,EACqC2D,CAEjC,CAFiCA,KACjCQ,CAAAA,CAAmB,MAAnBA,EAA2BnE,KAAKsG,CAAhCnC,EAAoDnE,KAAKiD,CAAzDkB,EAA0EnE,KAAK4D,CAA/EO,EAA+FnE,KAAKgE,CAApGG,CADiCR,GAIjC3D,KAAK2D,CAAL3D,GAA6BA,KAAKgE,CAALhE,CAAmB4C,UAJfe,GAuBjC3D,KAAK2D,CAAL3D,GAA6B3H,CAAAA,CAAY,CAAZA,CA7BjCoO,CA1BJI,EAiEGA,CAAP;AAAOA,KA9mBHpD,EAkpBAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,GAAR,YAAA;AAIIzD,WAAK4D,CAAL5D,CAAoBK,IAApBL,GAAwB,CAAxBA,EACAA,KAAKgE,CAALhE,CAAmB4C,UAAnB5C,GAAgCA,KAAK2D,CADrC3D,EAEAmE,CAAAA,CAAmB,SAAnBA,EAA8BnE,KAAK+C,CAAnCoB,EAAgDnE,KAAKiD,CAArDkB,EAAsEnE,KAAK4D,CAA3EO,EAA2FnE,KAAKgE,CAAhGG,EAAgGH,CAAe,CAA/GG,CAFAnE,EAKAA,KAAK0D,CAAL1D,GAAwB,CALxBA,EAMAA,KAAKoE,CAALpE,EANAA;AAMKoE,KA5pBDX,EAgqBZ,CAAA;AAlwBA,GAAA,EAAA;AAAA,MCzBMqD,CAAAA,GAAAA;AACF5B,IAAAA,iBAAAA,EAAmB,GADjB4B;AAEFC,IAAAA,sBAAAA,EAAAA,UFFoC9N,CEEpC8N,EFFoC9N;AAepC,UAAID,CAAAA,GAAkBC,CAAAA,CAAMiI,MAA5B;;AAEA,SAAA;AACI,YAAA,CAAqB,CAArB,KAAIlI,CAAAA,CAAGmG,SAAP,EAAA;AAGA,cAAA,CAAqB,CAArB,KAAInG,CAAAA,CAAGmG,SAAP,EACI,OAAOnG,CAAP;AAEJ,cAAIA,CAAAA,CAAGmI,YAAHnI,IACsC,WAAnCA,CAAAA,CAAGmI,YAAHnI,CAAiB,WAAjBA,CADP,EAEI,OAAOA,CAAP;AAAOA;AAAAA,OATf,QASeA,CAELA,CAAAA,GAAkBA,CAAAA,CAAGoI,UAFhBpI,KAE+BA,CAAAA,KAAOH,QAAAA,CAASsF,IAX9D;AAW8DA,KE5B5D2I;AAGFxC,IAAAA,cAAAA,ELuEJ,UAAiCvJ,CAAjC,EAAiCA;AAE7B,UAAMC,CAAAA,GAAyBD,CAAAA,CAAWE,SAAXF,CAAWE,CAAW,CAAtBF,CAA/B;AAKA,aApDJ,SAAA,CAAA,CAAqC1B,CAArC,EAA0DC,CAA1D,EAA0DA;AAGtD,YAAyB,MAArBD,CAAAA,CAAQE,QAAZ,EAA6B;AAIzB,eADA,IAAMC,CAAAA,GAAKC,gBAAAA,CAAkBJ,CAAlBI,CAAX,EACSC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIF,CAAAA,CAAGG,MAAvB,EAA+BD,CAAAA,EAA/B,EAAqC;AACjC,gBAAME,CAAAA,GAASJ,CAAAA,CAAIE,CAAJF,CAAf;AACAF,YAAAA,CAAAA,CAAQO,KAARP,CAAcQ,WAAdR,CAA2BM,CAA3BN,EAAmCE,CAAAA,CAAGO,gBAAHP,CAAqBI,CAArBJ,CAAnCF,EAAkEE,CAAAA,CAAGQ,mBAAHR,CAAwBI,CAAxBJ,CAAlEF;AAeJ;;AAAA,cARAA,CAAAA,CAAQO,KAARP,CAAcW,aAAdX,GAA8B,MAA9BA,EAGAA,CAAAA,CAAQY,eAARZ,CAAyB,IAAzBA,CAHAA,EAIAA,CAAAA,CAAQY,eAARZ,CAAyB,OAAzBA,CAJAA,EAKAA,CAAAA,CAAQY,eAARZ,CAAyB,WAAzBA,CALAA,EAQyB,aAArBA,CAAAA,CAAQa,QAAZ,EAAoC;AAEhC,gBAAMC,CAAAA,GAAYf,CAAlB;AAAA,gBACMgB,CAAAA,GAAYf,CADlB;AAAA,gBAGMgB,CAAAA,GAAmBF,CAAAA,CAAUG,UAAVH,CAAsB,IAAtBA,EAA6BI,YAA7BJ,CAA2C,CAA3CA,EAA8C,CAA9CA,EAAiDA,CAAAA,CAAUK,KAA3DL,EAAkEA,CAAAA,CAAUM,MAA5EN,CAHzB;AAKAC,YAAAA,CAAAA,CAAUE,UAAVF,CAAsB,IAAtBA,EAA6BM,YAA7BN,CAA2CC,CAA3CD,EAA6D,CAA7DA,EAAgE,CAAhEA;AAAgE;AAKxE;;AAAA,YAAIhB,CAAAA,CAAQuB,aAARvB,EAAJ,EAEI,KAASK,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIL,CAAAA,CAAQwB,UAARxB,CAAmBM,MAAvC,EAA+CD,CAAAA,EAA/C,EAEIoB,CAAAA,CAAyCzB,CAAAA,CAAQwB,UAARxB,CAAoBK,CAApBL,CAAzCyB,EAA+ExB,CAAAA,CAAQuB,UAARvB,CAAoBI,CAApBJ,CAA/EwB,CAAAA;AAURA,OAlDJ,CAkDgCC,CAlDhC,EAkD4CC,CAlD5C,GAoDWA,CAAP;AAAOA,KKjFL8L;AAIFV,IAAAA,gBAAAA,EAAkB,UAAUnK,CAAV,EAAaE,CAAb,EAAaA;AAAM,aAAOtD,QAAAA,CAASuN,gBAATvN,CAA2BoD,CAA3BpD,EAA8BsD,CAA9BtD,CAAP;AAAqCsD;AAJxE2K,GDyBN;;ACZA,WAAA,CAAA,CAAuB/G,CAAvB,EAAuBA;AAQnB,QAAA,CAAIiH,CAAJ,EAAA;AAKA,UAAIC,CAAAA,GAAaH,CAAAA,CAAOC,sBAAPD,CAA+B/G,CAA/B+G,CAAjB;AAIA,UAAKG,CAAL,EAKA,IAAA;AACID,QAAAA,CAAAA,GAAsB,IAAIvD,CAAJ,CAA6B1D,CAA7B,EAAgC+G,CAAhC,EAAwCG,CAAxC,EAAmEC,CAAnE,CAAtBF;AAEJ,OAHA,CAGA,OAAOG,CAAP,EAAOA;AAGH,cAFAD,CAAAA,CAAoBJ,CAApBI,EAA4BnH,CAA5BmH,EAA6B,CAA7BA,CAAAA,EAEMC,CAAN;AAAMA;AAAAA;AAId;;AAAA,WAAA,CAAA,CAA4BC,CAA5B,EAA4BA;AAIxB,QAAMpO,CAAAA,GAAKoO,CAAAA,CAAIlG,MAAf;AAAA,QAaMwG,CAAAA,GAAiB,UAACzO,CAAD,EAACA;AAIpBoO,MAAAA,CAAAA,CAAIjO,GAAJiO,IACAC,CAAAA,CAAOlO,GAAPkO,EADAD,EAEAE,CAAAA,CAAKnO,GAALmO,EAFAF,EAGAG,CAAAA,CAAOpO,GAAPoO,EAHAH,EAKIrO,CAAAA,IACAA,CAAAA,CAAG2J,aAAH3J,CAAiB,IAAI2O,WAAJ,CAAgBxP,CAAhB,EAAgBA;AAA+BwJ,QAAAA,OAAAA,EAAAA,CAAS,CAAxCxJ;AAA8CmJ,QAAAA,UAAAA,EAAAA,CAAY;AAA1DnJ,OAAhB,CAAjBa,CANJqO,EASAO,YAAAA,CAAcC,CAAdD,CATAP;AAScQ,KA1BlB;;AA6BI7O,IAAAA,CAAAA,IACAA,CAAAA,CAAG2J,aAAH3J,CAAiB,IAAI2O,WAAJ,CAAgBzP,CAAhB,EAAgBA;AAAgCyJ,MAAAA,OAAAA,EAAAA,CAAS,CAAzCzJ;AAA+CoJ,MAAAA,UAAAA,EAAAA,CAAY;AAA3DpJ,KAAhB,CAAjBc,CADAA;AAIJ,QAAM6O,CAAAA,GAAQvI,MAAAA,CAAON,UAAPM,CA/BG,YAAA;AAIb+H,MAAAA,CAAAA,CAAIjO,GAAJiO,IACAC,CAAAA,CAAOlO,GAAPkO,EADAD,EAEAE,CAAAA,CAAKnO,GAALmO,EAFAF,EAGAG,CAAAA,CAAOpO,GAAPoO,EAHAH,EAIAI,CAAAA,CAAcL,CAAdK,CAJAJ;AAIcD,KAuBJ9H,EAA6BwH,CAAAA,CAAOgB,UAApCxI,CAAd;AAAA,QAEM+H,CAAAA,GAAMU,CAAAA,CAAO/O,CAAP+O,EAAW,UAAXA,EAAuBL,CAAvBK,CAFZ;AAAA,QAGMT,CAAAA,GAASS,CAAAA,CAAO/O,CAAP+O,EAAW,aAAXA,EAA0BL,CAA1BK,CAHf;AAAA,QAIMR,CAAAA,GAAOQ,CAAAA,CAAO/O,CAAP+O,EAAW,WAAXA,EAAwBL,CAAxBK,CAJb;AAAA,QAOMP,CAAAA,GAASO,CAAAA,CAAOzI,MAAPyI,EAAe,QAAfA,EAAyBL,CAAzBK,EAAyBL,CAAgB,CAAzCK,CAPf;AAaJ;;AAAA,WAAA,CAAA,CAA6BjF,CAA7B,EAA6C7J,CAA7C,EAA+D2N,CAA/D,EAA+DA;AAG3D,QAAS,MAALA,CAAK,IAKD9D,CAAAA,CAAQkF,qBALhB,EAOQ,IAAA;AAEIlF,MAAAA,CAAAA,CAAQkF,qBAARlF,CAA+B7J,CAA/B6J,GAEI7J,CAAAA,CAAMgP,gBAFVnF;AAQJ,KAVA,CAUA,OAAO/C,CAAP,EAAOA,CAQfiH;AAAAA,IAAAA,CAAAA,GAAsB,IAAtBA;AAAsB;;AAAA,EAAA,CAAA,CAAA,QAAA,GA2D1B,UAA0BkB,CAA1B,EAA0BA;AAUtB,QARIA,CAAAA,IAEAtI,MAAAA,CAAOuI,IAAPvI,CAAasI,CAAbtI,EAAwBwI,OAAxBxI,CAAiC,UAAUyI,CAAV,EAAUA;AACvCvB,MAAAA,CAAAA,CAAQuB,CAARvB,CAAAA,GAAgBoB,CAAAA,CAAUG,CAAVH,CAAhBpB;AAA0BuB,KAD9BzI,CAFAsI,EAG8BG,CAK7BvB,CAAAA,CAAOwB,UAAZ,EAAyB;AAGrB,UAAMC,CAAAA,IJlMNtJ,CAAAA,GAAAA;AACAC,QAAAA,UAAAA,EAAa,iBAAiBrG,QAAAA,CAASwF,eADvCY;AAEAE,QAAAA,SAAAA,EAAY,eAAetG,QAAAA,CAASwF,eAFpCY;AAGAG,QAAAA,4BAAAA,EAAAA,KAA8BL;AAH9BE,OAAAA,EAMEI,CAAAA,GAAAA,CAAAA,CAAyBC,MAAAA,CAAc,MAAvCD,IAA4C,UAAUE,IAAV,CAAgBC,SAAAA,CAAUC,SAA1B,CAN9CR,EAQJA,CAAAA,CAASG,4BAATH,GAASG,EAEJ,2BAA2BG,IAA3B,CAAiCC,SAAAA,CAAUC,SAA3C,KAGAJ,CAAAA,IAAkB,kBAAkBxG,QAAAA,CAASwF,eALzCe,CARLH,EAgBGA,CIkLGsJ,CAAN;AASA,UAAIA,CAAAA,CAAiBnJ,4BAAjBmJ,IACGA,CAAAA,CAAiBpJ,SADpBoJ,IAEGA,CAAAA,CAAiBrJ,UAFxB,EAII,OAAA,CAAO,CAAP;AAAO;;AAAA,QJ/MXD,CI+MW,EJzMTI,CIyMS;AAcf,WAPIyH,CAAAA,CAAOgB,UAAPhB,GAEAtD,CAAAA,CAAqB,YAArBA,EAAmCgF,CAAnChF,EAAmCgF,CAAmB,CAAtDhF,CAFAsD,GAIAtD,CAAAA,CAAqB,YAArBA,EAAmCiE,CAAnCjE,EAAmCiE,CAAc,CAAjDjE,CAJAsD,EAIiD,CAG9C,CAAP;AAAO,GAnGe,EAmGf,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,IAAA,KAAA,EAAA,CAAA;AAAA,GAAA,CAnGe;AAmGf,C","sourcesContent":["// debug mode, which will highlight drop target, immediate user selection and events fired as you interact\n// only available in non-minified js / development environment\n// export const DEBUG = false;\n\n// css classes\nexport const CLASS_PREFIX = \"dnd-poly-\";\nexport const CLASS_DRAG_IMAGE = CLASS_PREFIX + \"drag-image\";\nexport const CLASS_DRAG_IMAGE_SNAPBACK = CLASS_PREFIX + \"snapback\";\nexport const CLASS_DRAG_OPERATION_ICON = CLASS_PREFIX + \"icon\";\n\n// custom event\nexport const EVENT_PREFIX = \"dnd-poly-\";\nexport const EVENT_DRAG_DRAGSTART_PENDING = EVENT_PREFIX + \"dragstart-pending\";\nexport const EVENT_DRAG_DRAGSTART_CANCEL = EVENT_PREFIX + \"dragstart-cancel\";\n\n// defines the array indexes to access string in ALLOWED_EFFECTS\nexport const enum EFFECT_ALLOWED {\n    NONE = 0,\n    COPY = 1,\n    COPY_LINK = 2,\n    COPY_MOVE = 3,\n    LINK = 4,\n    LINK_MOVE = 5,\n    MOVE = 6,\n    ALL = 7\n}\n\n// contains all possible values of the effectAllowed property\nexport const ALLOWED_EFFECTS = [ \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\" ];\n\n// defines the array indexes to access string in DROP_EFFECTS\nexport const enum DROP_EFFECT {\n    NONE = 0,\n    COPY = 1,\n    MOVE = 2,\n    LINK = 3,\n}\n\n// contains all possible values of the dropEffect property\nexport const DROP_EFFECTS = [ \"none\", \"copy\", \"move\", \"link\" ];\n","import { CLASS_DRAG_IMAGE_SNAPBACK } from \"./constants\";\nimport { supportsPassiveEventListener } from \"./feature-detection\";\n\n// evaluate once on startup\nconst supportsPassive = supportsPassiveEventListener();\n\nexport interface Point {\n    x:number;\n    y:number;\n}\n\nexport function isDOMElement( object:Element ) {\n    return object && object.tagName;\n}\n\nexport function addDocumentListener( ev:string, handler:EventListener, passive:boolean = true ) {\n    document.addEventListener( ev, handler, supportsPassive ? { passive: passive } : false );\n}\n\nexport function removeDocumentListener( ev:string, handler:EventListener ) {\n    document.removeEventListener( ev, handler );\n}\n\nexport function onEvt(el:EventTarget, event:string, handler:EventListener, capture:boolean = false) {\n\n    const options = supportsPassive ? {passive: true, capture: capture} : capture;\n\n    el.addEventListener(event, handler, options);\n\n    return {\n        off() {\n            el.removeEventListener(event, handler, options as any);\n        }\n    };\n}\n\nfunction prepareNodeCopyAsDragImage( srcNode:HTMLElement, dstNode:HTMLElement ) {\n\n    // Is this node an element?\n    if( srcNode.nodeType === 1 ) {\n\n        // Clone the style\n        const cs = getComputedStyle( srcNode );\n        for( let i = 0; i < cs.length; i++ ) {\n            const csName = cs[ i ];\n            dstNode.style.setProperty( csName, cs.getPropertyValue( csName ), cs.getPropertyPriority( csName ) );\n        }\n\n        // no interaction with the drag image, pls! this is also important to make the drag image transparent for hit-testing\n        // hit testing is done in the drag and drop iteration to find the element the user currently is hovering over while dragging.\n        // if pointer-events is not none or a browser does behave in an unexpected way than the hit test transparency on the drag image\n        // will break\n        dstNode.style.pointerEvents = \"none\";\n\n        // Remove any potential conflict attributes\n        dstNode.removeAttribute( \"id\" );\n        dstNode.removeAttribute( \"class\" );\n        dstNode.removeAttribute( \"draggable\" );\n\n        // canvas elements need special handling by copying canvas image data\n        if( dstNode.nodeName === \"CANVAS\" ) {\n\n            const canvasSrc = srcNode as HTMLCanvasElement;\n            const canvasDst = dstNode as HTMLCanvasElement;\n\n            const canvasSrcImgData = canvasSrc.getContext( \"2d\" ).getImageData( 0, 0, canvasSrc.width, canvasSrc.height );\n\n            canvasDst.getContext( \"2d\" ).putImageData( canvasSrcImgData, 0, 0 );\n        }\n    }\n\n    // Do the same for the children\n    if( srcNode.hasChildNodes() ) {\n\n        for( let i = 0; i < srcNode.childNodes.length; i++ ) {\n\n            prepareNodeCopyAsDragImage( <HTMLElement>srcNode.childNodes[ i ], <HTMLElement>dstNode.childNodes[ i ] );\n        }\n    }\n}\n\nexport function createDragImage( sourceNode:HTMLElement ):HTMLElement {\n\n    const dragImage = <HTMLElement>sourceNode.cloneNode( true );\n\n    // this removes any id's and stuff that could interfere with drag and drop\n    prepareNodeCopyAsDragImage( sourceNode, dragImage );\n\n    return dragImage;\n}\n\nfunction average( array:Array<number> ) {\n    if( array.length === 0 ) {\n        return 0;\n    }\n    return array.reduce( (function( s, v ) {\n        return v + s;\n    }), 0 ) / array.length;\n}\n\nexport function isTouchIdentifierContainedInTouchEvent( touchEvent:TouchEvent, touchIdentifier:number ) {\n    for( let i = 0; i < touchEvent.changedTouches.length; i++ ) {\n        const touch = touchEvent.changedTouches[ i ];\n        if( touch.identifier === touchIdentifier ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Calc center of polygon spanned by multiple touches in page (full page size, with hidden scrollable area) coordinates\n * or in viewport (screen coordinates) coordinates.\n */\nexport function updateCentroidCoordinatesOfTouchesIn( coordinateProp:\"page\" | \"client\", event:TouchEvent, outPoint:Point ):void {\n    const pageXs:Array<number> = [], pageYs:Array<number> = [];\n    for( let i = 0; i < event.touches.length; i++ ) {\n        const touch = event.touches[ i ];\n        pageXs.push( touch[ coordinateProp + \"X\" ] );\n        pageYs.push( touch[ coordinateProp + \"Y\" ] );\n    }\n    outPoint.x = average( pageXs );\n    outPoint.y = average( pageYs );\n}\n\n// cross-browser css transform property prefixes\nconst TRANSFORM_CSS_VENDOR_PREFIXES = [ \"\", \"-webkit-\" ];\n\nexport function extractTransformStyles( sourceNode:HTMLElement ):string[] {\n\n    return TRANSFORM_CSS_VENDOR_PREFIXES.map( function( prefix:string ) {\n\n        let transform = sourceNode.style[ prefix + \"transform\" ];\n\n        if( !transform || transform === \"none\" ) {\n            return \"\";\n        }\n\n        // removes translate(x,y)\n        return transform.replace( /translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\" );\n    } );\n}\n\nexport function translateElementToPoint( element:HTMLElement, pnt:Point, originalTransforms:string[], offset?:Point, centerOnCoordinates = true ):void {\n\n    let x = pnt.x, y = pnt.y;\n\n    if( offset ) {\n        x += offset.x;\n        y += offset.y;\n    }\n\n    if( centerOnCoordinates ) {\n        x -= (parseInt( <any>element.offsetWidth, 10 ) / 2);\n        y -= (parseInt( <any>element.offsetHeight, 10 ) / 2);\n    }\n\n    // using translate3d for max performance\n    const translate = \"translate3d(\" + x + \"px,\" + y + \"px, 0)\";\n\n    for( let i = 0; i < TRANSFORM_CSS_VENDOR_PREFIXES.length; i++ ) {\n        const transformProp = TRANSFORM_CSS_VENDOR_PREFIXES[ i ] + \"transform\";\n        element.style[ transformProp ] = translate + \" \" + originalTransforms[ i ];\n    }\n}\n\n/**\n * calculates the coordinates of the drag source and transitions the drag image to those coordinates.\n * the drag operation is finished after the transition has ended.\n */\nexport function applyDragImageSnapback( sourceEl:HTMLElement, dragImage:HTMLElement, dragImageTransforms:string[], transitionEndCb:Function ):void {\n\n    const cs = getComputedStyle( sourceEl );\n\n    if( cs.visibility === \"hidden\" || cs.display === \"none\" ) {\n        console.log( \"dnd-poly: source node is not visible. skipping snapback transition.\" );\n        // shortcut to end the drag operation\n        transitionEndCb();\n        return;\n    }\n    // add class containing transition rules\n    dragImage.classList.add( CLASS_DRAG_IMAGE_SNAPBACK );\n\n    const csDragImage = getComputedStyle( dragImage );\n    const durationInS = parseFloat( csDragImage.transitionDuration );\n    if( isNaN( durationInS ) || durationInS === 0 ) {\n        console.log( \"dnd-poly: no transition used - skipping snapback\" );\n        transitionEndCb();\n        return;\n    }\n\n    console.log( \"dnd-poly: starting dragimage snap back\" );\n\n    // calc source node position\n    const rect = sourceEl.getBoundingClientRect();\n\n    const pnt:Point = {\n        x: rect.left,\n        y: rect.top\n    };\n\n    // add scroll offset of document\n    pnt.x += (document.body.scrollLeft || document.documentElement.scrollLeft);\n    pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);\n\n    //TODO this sometimes fails to calculate the correct origin position.. find out when exactly and how to detect\n    pnt.x -= parseInt( cs.marginLeft, 10 );\n    pnt.y -= parseInt( cs.marginTop, 10 );\n\n    const delayInS = parseFloat( csDragImage.transitionDelay );\n    const durationInMs = Math.round( (durationInS + delayInS) * 1000 );\n\n    // apply the translate\n    translateElementToPoint( dragImage, pnt, dragImageTransforms, undefined, false );\n\n    setTimeout( transitionEndCb, durationInMs );\n}\n","export interface DetectedFeatures {\n    draggable:boolean;\n    dragEvents:boolean;\n    userAgentSupportingNativeDnD:boolean;\n}\n\nexport function detectFeatures():DetectedFeatures {\n\n    let features:DetectedFeatures = {\n        dragEvents: (\"ondragstart\" in document.documentElement),\n        draggable: (\"draggable\" in document.documentElement),\n        userAgentSupportingNativeDnD: undefined\n    };\n\n    const isBlinkEngine = !!((<any>window).chrome) || /chrome/i.test( navigator.userAgent );\n\n    features.userAgentSupportingNativeDnD = !(\n        // if is mobile safari or android browser -> no native dnd\n        (/iPad|iPhone|iPod|Android/.test( navigator.userAgent ))\n        || // OR\n        //if is blink(chrome/opera) with touch events enabled -> no native dnd\n        (isBlinkEngine && (\"ontouchstart\" in document.documentElement))\n    );\n\n    return features;\n}\n\nexport function supportsPassiveEventListener():boolean {\n\n    let supportsPassiveEventListeners = false;\n\n    // reference https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    try {\n        let opts = Object.defineProperty( {}, \"passive\", {\n            get: function() {\n                supportsPassiveEventListeners = true;\n            }\n        } );\n        window.addEventListener( \"test\", null, opts );\n    }\n        // tslint:disable-next-line:no-empty\n    catch( e ) {\n    }\n\n    return supportsPassiveEventListeners;\n}\n","import { ALLOWED_EFFECTS, DROP_EFFECT, DROP_EFFECTS } from \"./constants\";\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode\n */\nexport const enum DragDataStoreMode {\n    _DISCONNECTED, // adding an extra mode here because we need a special state to disconnect the data store from dataTransfer instance\n    READONLY,\n    READWRITE,\n    PROTECTED\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store\n */\nexport interface DragDataStore {\n    mode:DragDataStoreMode;\n    data:{ [type:string]:any };\n    types:Array<string>;\n    effectAllowed:string;\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#datatransfer\n */\nexport class DataTransfer {\n\n    private _dropEffect:string = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n\n    public get dropEffect() {\n        return this._dropEffect;\n    }\n\n    //public get files():FileList {\n    //    return undefined;\n    //}\n    //\n    //public get items():DataTransferItemList {\n    //    return undefined;\n    //}\n\n    public set dropEffect( value ) {\n        if( this._dataStore.mode !== DragDataStoreMode._DISCONNECTED\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\n            this._dropEffect = value;\n        }\n    }\n\n    public get types():ReadonlyArray<string> {\n        if( this._dataStore.mode !== DragDataStoreMode._DISCONNECTED ) {\n            return Object.freeze( this._dataStore.types );\n        }\n    }\n\n    public get effectAllowed() {\n        return this._dataStore.effectAllowed;\n    }\n\n    public set effectAllowed( value ) {\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\n            this._dataStore.effectAllowed = value;\n        }\n    }\n\n    constructor( private _dataStore:DragDataStore,\n                 private _setDragImageHandler:( image:Element, x:number, y:number ) => void ) {\n    }\n\n    public setData( type:string, data:string ):void {\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE ) {\n\n            if( type.indexOf( \" \" ) > -1 ) {\n                throw new Error( \"illegal arg: type contains space\" );\n            }\n\n            this._dataStore.data[ type ] = data;\n\n            if( this._dataStore.types.indexOf( type ) === -1 ) {\n                this._dataStore.types.push( type );\n            }\n        }\n    }\n\n    public getData( type:string ):string {\n        if( this._dataStore.mode === DragDataStoreMode.READONLY\n            || this._dataStore.mode === DragDataStoreMode.READWRITE ) {\n            return this._dataStore.data[ type ] || \"\";\n        }\n    }\n\n    public clearData( format?:string ):void {\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE ) {\n            // delete data for format\n            if( format && this._dataStore.data[ format ] ) {\n                delete this._dataStore.data[ format ];\n                var index = this._dataStore.types.indexOf( format );\n                if( index > -1 ) {\n                    this._dataStore.types.splice( index, 1 );\n                }\n                return;\n            }\n            // delete all data\n            this._dataStore.data = {};\n            this._dataStore.types = [];\n        }\n    }\n\n    public setDragImage( image:Element, x:number, y:number ):void {\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE ) {\n            this._setDragImageHandler( image, x, y );\n        }\n    }\n}\n","import { ALLOWED_EFFECTS, DROP_EFFECT, DROP_EFFECTS, EFFECT_ALLOWED } from \"./constants\";\nimport { DataTransfer, DragDataStore, DragDataStoreMode } from \"./drag-data-store\";\n\n/**\n * Search for a possible draggable item upon an event that can initialize a drag operation.\n * Can be overridden in polyfill config.\n */\nexport function tryFindDraggableTarget( event:TouchEvent ):HTMLElement | undefined {\n\n    //1. Determine what is being dragged, as follows:\n\n    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n    // If the drag operation was invoked on a selection, then it is the selection that is being dragged.\n    //if( (<Element>event.target).nodeType === 3 ) {\n    //\n    //    config.log( \"drag on text\" );\n    //    return <Element>event.target;\n    //}\n    //Otherwise, if the drag operation was invoked on a Document, it is the first element, going up the ancestor chain, starting at the node that the\n    // user tried to drag, that has the IDL attribute draggable set to true.\n    //else {\n\n    let el = <HTMLElement>event.target;\n\n    do {\n        if( el.draggable === false ) {\n            continue;\n        }\n        if( el.draggable === true ) {\n            return el;\n        }\n        if( el.getAttribute\n            && el.getAttribute( \"draggable\" ) === \"true\" ) {\n            return el;\n        }\n    } while( (el = <HTMLElement>el.parentNode) && el !== document.body );\n}\n\n/**\n * Implements \"6.\" in the processing steps defined for a dnd event\n * https://html.spec.whatwg.org/multipage/interaction.html#dragevent\n */\nexport function determineDropEffect( effectAllowed:string, sourceNode:Element ) {\n\n    // uninitialized\n    if( !effectAllowed ) {\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( sourceNode.nodeType === 1 ) {\n        //\n        //return \"move\";\n        //}\n\n        // link\n        if( sourceNode.nodeType === 3 && (<HTMLElement>sourceNode).tagName === \"A\" ) {\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n        }\n\n        // copy\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n    }\n\n    // none\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.NONE ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.NONE ];\n    }\n    // copy or all\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.COPY ] ) === 0 || effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.ALL ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n    }\n    // link\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.LINK ] ) === 0 ) {\n        return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n    }\n    // move\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.MOVE ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\n    }\n\n    // copy\n    return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n}\n\nfunction createDragEventFromTouch( targetElement:Element,\n                                   e:TouchEvent,\n                                   type:string,\n                                   cancelable:boolean,\n                                   window:Window,\n                                   dataTransfer:DataTransfer,\n                                   relatedTarget:Element = null ) {\n\n    const touch:Touch = e.changedTouches[ 0 ];\n\n    const dndEvent:DragEvent = new Event( type, {\n        bubbles: true,\n        cancelable: cancelable\n    } ) as DragEvent;\n\n    // cast our polyfill\n    (dndEvent as any).dataTransfer = dataTransfer as any;\n    (dndEvent as any).relatedTarget = relatedTarget;\n\n    // set the coordinates\n    (dndEvent as any).screenX = touch.screenX;\n    (dndEvent as any).screenY = touch.screenY;\n    (dndEvent as any).clientX = touch.clientX;\n    (dndEvent as any).clientY = touch.clientY;\n    (dndEvent as any).pageX = touch.pageX;\n    (dndEvent as any).pageY = touch.pageY;\n\n    const targetRect = targetElement.getBoundingClientRect();\n    (dndEvent as any).offsetX = dndEvent.clientX - targetRect.left;\n    (dndEvent as any).offsetY = dndEvent.clientY - targetRect.top;\n\n    return dndEvent;\n}\n\n/**\n * Reference https://html.spec.whatwg.org/multipage/interaction.html#dndevents\n */\nexport function dispatchDragEvent( dragEvent:string,\n                                   targetElement:Element,\n                                   touchEvent:TouchEvent,\n                                   dataStore:DragDataStore,\n                                   dataTransfer:DataTransfer,\n                                   cancelable:boolean = true,\n                                   relatedTarget:Element | null = null ):boolean {\n\n    console.log( \"dnd-poly: dispatching \" + dragEvent );\n\n    // if( DEBUG ) {\n    //     const debug_class = CLASS_PREFIX + \"debug\",\n    //         debug_class_event_target = CLASS_PREFIX + \"event-target\",\n    //         debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\n    //     targetElement.classList.add( debug_class );\n    //     targetElement.classList.add( debug_class_event_target );\n    //     if( relatedTarget ) {\n    //         relatedTarget.classList.add( debug_class );\n    //         relatedTarget.classList.add( debug_class_event_related_target );\n    //     }\n    // }\n\n    const leaveEvt = createDragEventFromTouch( targetElement, touchEvent, dragEvent, cancelable, document.defaultView, dataTransfer, relatedTarget );\n    const cancelled = !targetElement.dispatchEvent( leaveEvt );\n\n    dataStore.mode = DragDataStoreMode._DISCONNECTED;\n\n    // if( DEBUG ) {\n    //     const debug_class_event_target = CLASS_PREFIX + \"event-target\",\n    //         debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\n    //     targetElement.classList.remove( debug_class_event_target );\n    //     if( relatedTarget ) {\n    //         relatedTarget.classList.remove( debug_class_event_related_target );\n    //     }\n    // }\n\n    return cancelled;\n}\n\n/**\n * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n */\nexport function determineDragOperation( effectAllowed:string, dropEffect:string ):string {\n\n    // unitialized or all\n    if( !effectAllowed || effectAllowed === ALLOWED_EFFECTS[ 7 ] ) {\n        return dropEffect;\n    }\n\n    if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.COPY ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.COPY ] ) === 0 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n        }\n    }\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.LINK ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.LINK ] ) === 0 || effectAllowed.indexOf( \"Link\" ) > -1 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n        }\n    }\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) === 0 || effectAllowed.indexOf( \"Move\" ) > -1 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\n        }\n    }\n\n    return DROP_EFFECTS[ DROP_EFFECT.NONE ];\n}\n","import { Config } from \"../index\";\nimport {\n    CLASS_DRAG_IMAGE, CLASS_DRAG_OPERATION_ICON, CLASS_PREFIX, DROP_EFFECT, DROP_EFFECTS\n} from \"./constants\";\nimport {\n    addDocumentListener, applyDragImageSnapback, extractTransformStyles, isDOMElement,\n    isTouchIdentifierContainedInTouchEvent, Point, removeDocumentListener, translateElementToPoint,\n    updateCentroidCoordinatesOfTouchesIn\n} from \"./dom-utils\";\nimport { DataTransfer, DragDataStore, DragDataStoreMode } from \"./drag-data-store\";\nimport { determineDragOperation, determineDropEffect, dispatchDragEvent } from \"./drag-utils\";\n\n/**\n * For tracking the different states of a drag operation.\n */\nexport const enum DragOperationState {\n    // initial state of a controller, if no movement is detected the operation ends with this state\n    POTENTIAL,\n    // after movement is detected the drag operation starts and keeps this state until it ends\n    STARTED,\n    // when the drag operation ended normally\n    ENDED,\n    // when the drag operation ended with a cancelled input event\n    CANCELLED\n}\n\n/**\n * Aims to implement the HTML5 d'n'd spec (https://html.spec.whatwg.org/multipage/interaction.html#dnd) as close as it can get.\n * Note that all props that are private should start with an underscore to enable better minification.\n *\n * TODO remove lengthy spec comments in favor of short references to the spec\n */\nexport class DragOperationController {\n\n    private _dragOperationState:DragOperationState = DragOperationState.POTENTIAL;\n\n    private _dragImage:HTMLElement;\n    private _dragImageTransforms:string[];\n    private _dragImagePageCoordinates:Point; // the current page coordinates of the dragImage\n    private _dragImageOffset:Point; // offset of the drag image relative to the coordinates\n\n    private _currentHotspotCoordinates:Point;    // the point relative to viewport for determining the immediate user selection\n\n    private _immediateUserSelection:HTMLElement = null;  // the element the user currently hovers while dragging\n    private _currentDropTarget:HTMLElement = null;   // the element that was selected as a valid drop target by the d'n'd operation\n\n    private _dragDataStore:DragDataStore;\n    private _dataTransfer:DataTransfer;\n\n    private _currentDragOperation:string;    // the current drag operation set according to the d'n'd processing model\n\n    private _initialTouch:Touch;  // the identifier for the touch that initiated the drag operation\n    private _touchMoveHandler:EventListener;\n    private _touchEndOrCancelHandler:EventListener;\n    private _lastTouchEvent:TouchEvent;\n\n    private _iterationLock:boolean;\n    private _iterationIntervalId:number;\n\n    constructor( private _initialEvent:TouchEvent,\n                 private _config:Config,\n                 private _sourceNode:HTMLElement,\n                 private _dragOperationEndedCb:( config:Config, event:TouchEvent, state:DragOperationState ) => void ) {\n\n        console.log( \"dnd-poly: setting up potential drag operation..\" );\n\n        this._lastTouchEvent = _initialEvent;\n        this._initialTouch = _initialEvent.changedTouches[ 0 ];\n\n        // create bound event listeners\n        this._touchMoveHandler = this._onTouchMove.bind( this );\n        this._touchEndOrCancelHandler = this._onTouchEndOrCancel.bind( this );\n        addDocumentListener( \"touchmove\", this._touchMoveHandler, false );\n        addDocumentListener( \"touchend\", this._touchEndOrCancelHandler, false );\n        addDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler, false );\n\n        // the only thing we do is setup the touch listeners. if drag will really start is decided in touch move handler.\n\n        //<spec>\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 3. Establish which DOM node is the source node, as follows:\n        // If it is a selection that is being dragged, then the source node is the text node that the user started the drag on (typically the text node\n        // that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin\n        // a drag of \"the selection\", then the source node is the first text node containing a part of the selection.  Otherwise, if it is an element\n        // that is being dragged, then the source node is the element that is being dragged.  Otherwise, the source node is part of another document or\n        // application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead\n        // follow the platform-specific conventions relevant to that situation.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 4. Determine the list of dragged nodes, as follows:\n\n        //    If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or\n        // completely included in the selection (including all their ancestors).\n\n        //    Otherwise, the list of dragged nodes contains only the source node, if any.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 5. If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows:\n\n        //The drag data item type string\n        //\"text/plain\"\n        //The drag data item kind\n        //Plain Unicode string\n        //The actual data\n        //The text of the selection\n        //Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows:\n        //\n        //The drag data item type string\n        //The MIME type of the file, if known, or \"application/octet-stream\" otherwise.\n        //    The drag data item kind\n        //File\n        //The actual data\n        //The file's contents and name.\n        //Dragging files can currently only happen from outside a browsing context, for example from a file system manager application.\n        //\n        //    If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data\n        // being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged\n        // data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must\n        // be converted to ASCII lowercase.  Perform drag-and-drop initialization steps defined in any other applicable specifications.\n\n        //</spec>\n    }\n\n    //<editor-fold desc=\"setup/teardown\">\n\n    /**\n     * Setup dragImage, input listeners and the drag\n     * and drop process model iteration interval.\n     */\n    private _setup():boolean {\n        console.log( \"dnd-poly: starting drag and drop operation\" );\n\n        this._dragOperationState = DragOperationState.STARTED;\n\n        this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n\n        this._dragDataStore = {\n            data: {},\n            effectAllowed: undefined,\n            mode: DragDataStoreMode.PROTECTED,\n            types: [],\n        };\n\n        this._currentHotspotCoordinates = {\n            x: null,\n            y: null\n        };\n\n        this._dragImagePageCoordinates = {\n            x: null,\n            y: null\n        };\n\n        let dragImageSrc:HTMLElement = this._sourceNode;\n\n        this._dataTransfer = new DataTransfer( this._dragDataStore, ( element:HTMLElement, x:number, y:number ) => {\n\n            dragImageSrc = element;\n\n            if( typeof x === \"number\" || typeof y === \"number\" ) {\n                this._dragImageOffset = {\n                    x: x || 0,\n                    y: y || 0\n                };\n            }\n        } );\n\n        // 9. Fire a DND event named dragstart at the source node.\n        this._dragDataStore.mode = DragDataStoreMode.READWRITE;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        if( dispatchDragEvent( \"dragstart\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\n            console.log( \"dnd-poly: dragstart cancelled\" );\n            // dragstart has been prevented -> cancel d'n'd\n            this._dragOperationState = DragOperationState.CANCELLED;\n            this._cleanup();\n            return false;\n        }\n\n        updateCentroidCoordinatesOfTouchesIn( \"page\", this._lastTouchEvent, this._dragImagePageCoordinates );\n        const dragImage = this._config.dragImageSetup( dragImageSrc );\n        this._dragImageTransforms = extractTransformStyles( dragImage );\n        // set layout styles for freely moving it around\n        dragImage.style.position = \"absolute\";\n        dragImage.style.left = \"0px\";\n        dragImage.style.top = \"0px\";\n        // on top of all\n        dragImage.style.zIndex = \"999999\";\n\n        // add polyfill class for default styling\n        dragImage.classList.add( CLASS_DRAG_IMAGE );\n        dragImage.classList.add( CLASS_DRAG_OPERATION_ICON );\n        this._dragImage = dragImage;\n\n        if( !this._dragImageOffset ) {\n\n            // apply specific offset\n            if( this._config.dragImageOffset ) {\n\n                this._dragImageOffset = {\n                    x: this._config.dragImageOffset.x,\n                    y: this._config.dragImageOffset.y\n                };\n            }\n            // center drag image on touch coordinates\n            else if( this._config.dragImageCenterOnTouch ) {\n\n                const cs = getComputedStyle( dragImageSrc );\n                this._dragImageOffset = {\n                    x: 0 - parseInt( cs.marginLeft, 10 ),\n                    y: 0 - parseInt( cs.marginTop, 10 )\n                };\n            }\n            // by default initialize drag image offset the same as desktop\n            else {\n\n                const targetRect = dragImageSrc.getBoundingClientRect();\n                const cs = getComputedStyle( dragImageSrc );\n                this._dragImageOffset = {\n                    x: targetRect.left - this._initialTouch.clientX - parseInt( cs.marginLeft, 10 ) + targetRect.width / 2,\n                    y: targetRect.top - this._initialTouch.clientY - parseInt( cs.marginTop, 10 ) + targetRect.height / 2\n                };\n            }\n        }\n\n        translateElementToPoint( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\n        document.body.appendChild( this._dragImage );\n\n        // 10. Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below.\n        this._iterationIntervalId = window.setInterval( () => {\n\n            // If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due,\n            // abort these steps for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\n            if( this._iterationLock ) {\n                console.log( \"dnd-poly: iteration skipped because previous iteration hast not yet finished.\" );\n                return;\n            }\n            this._iterationLock = true;\n\n            this._dragAndDropProcessModelIteration();\n\n            this._iterationLock = false;\n        }, this._config.iterationInterval );\n\n        return true;\n    }\n\n    private _cleanup() {\n\n        console.log( \"dnd-poly: cleanup\" );\n\n        if( this._iterationIntervalId ) {\n            clearInterval( this._iterationIntervalId );\n            this._iterationIntervalId = null;\n        }\n\n        removeDocumentListener( \"touchmove\", this._touchMoveHandler );\n        removeDocumentListener( \"touchend\", this._touchEndOrCancelHandler );\n        removeDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler );\n\n        if( this._dragImage ) {\n            this._dragImage.parentNode.removeChild( this._dragImage );\n            this._dragImage = null;\n        }\n\n        this._dragOperationEndedCb( this._config, this._lastTouchEvent, this._dragOperationState );\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"touch handlers\">\n\n    private _onTouchMove( event:TouchEvent ) {\n\n        // filter unrelated touches\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\n            return;\n        }\n\n        // update the reference to the last received touch event\n        this._lastTouchEvent = event;\n\n        // drag operation did not start yet but on movement it should start\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\n\n            let startDrag:boolean;\n\n            // is a lifecycle hook present?\n            if( this._config.dragStartConditionOverride ) {\n\n                try {\n                    startDrag = this._config.dragStartConditionOverride( event );\n                }\n                catch( e ) {\n                    console.error( \"dnd-poly: error in dragStartConditionOverride hook: \" + e );\n                    startDrag = false;\n                }\n            }\n            else {\n\n                // by default only allow a single moving finger to initiate a drag operation\n                startDrag = (event.touches.length === 1);\n            }\n\n            if( !startDrag ) {\n\n                this._cleanup();\n                return;\n            }\n\n            // setup will return true when drag operation starts\n            if( this._setup() === true ) {\n\n                // prevent scrolling when drag operation starts\n                this._initialEvent.preventDefault();\n                event.preventDefault();\n            }\n\n            return;\n        }\n\n        console.log( \"dnd-poly: moving draggable..\" );\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        // populate shared coordinates from touch event\n        updateCentroidCoordinatesOfTouchesIn( \"client\", event, this._currentHotspotCoordinates );\n        updateCentroidCoordinatesOfTouchesIn( \"page\", event, this._dragImagePageCoordinates );\n\n        if( this._config.dragImageTranslateOverride ) {\n\n            try {\n\n                let handledDragImageTranslate = false;\n\n                this._config.dragImageTranslateOverride(\n                    event,\n                    {\n                        x: this._currentHotspotCoordinates.x,\n                        y: this._currentHotspotCoordinates.y\n                    },\n                    this._immediateUserSelection,\n                    ( offsetX:number, offsetY:number ) => {\n\n                        // preventing translation of drag image when there was a drag operation cleanup meanwhile\n                        if( !this._dragImage ) {\n                            return;\n                        }\n\n                        handledDragImageTranslate = true;\n\n                        this._currentHotspotCoordinates.x += offsetX;\n                        this._currentHotspotCoordinates.y += offsetY;\n                        this._dragImagePageCoordinates.x += offsetX;\n                        this._dragImagePageCoordinates.y += offsetY;\n\n                        translateElementToPoint(\n                            this._dragImage,\n                            this._dragImagePageCoordinates,\n                            this._dragImageTransforms,\n                            this._dragImageOffset,\n                            this._config.dragImageCenterOnTouch\n                        );\n                    }\n                );\n\n                if( handledDragImageTranslate ) {\n                    return;\n                }\n            }\n            catch( e ) {\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\n            }\n        }\n\n        translateElementToPoint( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\n    }\n\n    private _onTouchEndOrCancel( event:TouchEvent ) {\n\n        // filter unrelated touches\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\n            return;\n        }\n\n        // let the dragImageTranslateOverride know that its over\n        if( this._config.dragImageTranslateOverride ) {\n            try {\n                /* tslint:disable */\n                this._config.dragImageTranslateOverride( undefined, undefined, undefined, function() {\n                } );\n            }\n            catch( e ) {\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\n            }\n        }\n\n        // drag operation did not even start\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\n            this._cleanup();\n            return;\n        }\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        this._dragOperationState = (event.type === \"touchcancel\") ? DragOperationState.CANCELLED : DragOperationState.ENDED;\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"dnd spec logic\">\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragAndDropProcessModelIteration():void {\n\n        // if( DEBUG ) {\n        //     var debug_class = CLASS_PREFIX + \"debug\",\n        //         debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n        //         debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\n        // }\n\n        const previousDragOperation = this._currentDragOperation;\n\n        // Fire a DND event named drag event at the source node.\n        this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        const dragCancelled = dispatchDragEvent( \"drag\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer );\n        if( dragCancelled ) {\n            console.log( \"dnd-poly: drag event cancelled.\" );\n            // If this event is canceled, the user agent must set the current drag operation to \"none\" (no drag operation).\n            this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        }\n\n        // Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface),\n        // or if the drag event was canceled, then this will be the last iteration.\n        if( dragCancelled || this._dragOperationState === DragOperationState.ENDED || this._dragOperationState === DragOperationState.CANCELLED ) {\n\n            const dragFailed = this._dragOperationEnded( this._dragOperationState );\n\n            // if drag failed transition snap back\n            if( dragFailed ) {\n\n                applyDragImageSnapback( this._sourceNode, this._dragImage, this._dragImageTransforms, () => {\n                    this._finishDragOperation();\n                } );\n                return;\n            }\n\n            // Otherwise immediately\n            // Fire a DND event named dragend at the source node.\n            this._finishDragOperation();\n            return;\n        }\n\n        // If the drag event was not canceled and the user has not ended the drag-and-drop operation,\n        // check the state of the drag-and-drop operation, as follows:\n        const newUserSelection:HTMLElement = <HTMLElement>this._config.elementFromPoint( this._currentHotspotCoordinates.x, this._currentHotspotCoordinates.y );\n\n        console.log( \"dnd-poly: new immediate user selection is: \" + newUserSelection );\n\n        const previousTargetElement = this._currentDropTarget;\n\n        // If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration),\n        // and if this immediate user selection is not the same as the current target element,\n        // then fire a DND event named dragexit at the current target element,\n        // and then update the current target element as follows:\n        if( newUserSelection !== this._immediateUserSelection && newUserSelection !== this._currentDropTarget ) {\n\n            // if( DEBUG ) {\n            //\n            //     if( this._immediateUserSelection ) {\n            //         this._immediateUserSelection.classList.remove( debug_class_user_selection );\n            //     }\n            //\n            //     if( newUserSelection ) {\n            //         newUserSelection.classList.add( debug_class );\n            //         newUserSelection.classList.add( debug_class_user_selection );\n            //     }\n            // }\n\n            this._immediateUserSelection = newUserSelection;\n\n            if( this._currentDropTarget !== null ) {\n                this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                dispatchDragEvent( \"dragexit\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n            }\n\n            // If the new immediate user selection is null\n            if( this._immediateUserSelection === null ) {\n                //Set the current target element to null also.\n                this._currentDropTarget = this._immediateUserSelection;\n\n                console.log( \"dnd-poly: current drop target changed to null\" );\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // If the new immediate user selection is in a non-DOM document or application\n            // else if() {\n            //      Set the current target element to the immediate user selection.\n            //      this.currentDropTarget = this.immediateUserSelection;\n            //      return;\n            // }\n            // Otherwise\n            else {\n                // Fire a DND event named dragenter at the immediate user selection.\n                //the polyfill cannot determine if a handler even exists as browsers do to silently\n                // allow drop when no listener existed, so this event MUST be handled by the client\n                this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore.effectAllowed, this._sourceNode );\n                if( dispatchDragEvent( \"dragenter\", this._immediateUserSelection, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\n                    console.log( \"dnd-poly: dragenter default prevented\" );\n                    // If the event is canceled, then set the current target element to the immediate user selection.\n                    this._currentDropTarget = this._immediateUserSelection;\n                    this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\n                }\n                // Otherwise, run the appropriate step from the following list:\n                else {\n\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //console.log( \"dnd-poly: dragenter not prevented, searching for dropzone..\" );\n                    //var newTarget = DragOperationController.FindDropzoneElement( this.immediateUserSelection );\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or an\n                    // editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag data\n                    // item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.immediateUserSelection, this.dragDataStore ) ) {\n                    //Set the current target element to the immediate user selection anyway.\n                    //this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    //else\n                    // If the current target element is an element with a dropzone attribute that matches the drag data store\n                    //if( newTarget === this.immediateUserSelection &&\n                    //    DragOperationController.GetOperationForMatchingDropzone( this.immediateUserSelection, this.dragDataStore ) !== \"none\" ) {\n                    // Set the current target element to the immediate user selection anyway.\n                    //    this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    // If the immediate user selection is an element that itself has an ancestor element\n                    // with a dropzone attribute that matches the drag data store\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //else if( newTarget !== null && DragOperationController.GetOperationForMatchingDropzone( newTarget, this.dragDataStore ) ) {\n\n                    // If the immediate user selection is new target, then leave the current target element unchanged.\n\n                    // Otherwise, fire a DND event named dragenter at new target, with the current target element\n                    // as the specific related target. Then, set the current target element to new target,\n                    // regardless of whether that event was canceled or not.\n                    //this.dragenter( newTarget, this.currentDropTarget );\n                    //this.currentDropTarget = newTarget;\n                    //}\n                    // If the current target element is not the body element\n                    //else\n                    if( this._immediateUserSelection !== document.body ) {\n                        // Fire a DND event named dragenter at the body element, and set the current target element to the body element, regardless of\n                        // whether that event was canceled or not.\n                        // Note: If the body element is null, then the event will be fired at the Document object (as\n                        // required by the definition of the body element), but the current target element would be set to null, not the Document object.\n\n                        // We do not listen to what the spec says here because this results in doubled events on the body/document because if the first one\n                        // was not cancelled it will have bubbled up to the body already ;)\n                        //  this.dragenter( window.document.body );\n                        this._currentDropTarget = document.body;\n                    }\n                    // Otherwise\n                    //else {\n                    // leave the current drop target unchanged\n                    //}\n                }\n            }\n        }\n\n        // If the previous step caused the current target element to change,\n        // and if the previous target element was not null or a part of a non-DOM document,\n        // then fire a DND event named dragleave at the previous target element.\n        if( previousTargetElement !== this._currentDropTarget && (isDOMElement( previousTargetElement )) ) {\n\n            // if( DEBUG ) {\n            //     previousTargetElement.classList.remove( debug_class_drop_target );\n            // }\n\n            console.log( \"dnd-poly: current drop target changed.\" );\n\n            this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n            dispatchDragEvent( \"dragleave\", previousTargetElement, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false, this._currentDropTarget );\n        }\n\n        // If the current target element is a DOM element, then fire a DND event named dragover at this current target element.\n        if( isDOMElement( this._currentDropTarget ) ) {\n\n            // if( DEBUG ) {\n            //     this._currentDropTarget.classList.add( debug_class );\n            //     this._currentDropTarget.classList.add( debug_class_drop_target );\n            // }\n\n            // If the dragover event is not canceled, run the appropriate step from the following list:\n            this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore.effectAllowed, this._sourceNode );\n            if( dispatchDragEvent( \"dragover\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) === false ) {\n\n                console.log( \"dnd-poly: dragover not prevented on possible drop-target.\" );\n                // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n\n                // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or\n                // an editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag\n                // data item kind Plain Unicode string\n                //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                // Set the current drag operation to either \"copy\" or \"move\", as appropriate given the platform conventions.\n                //this.currentDragOperation = \"copy\"; //or move. spec says its platform specific behaviour.\n                //}\n                //else {\n                // If the current target element is an element with a dropzone attribute that matches the drag data store\n                //this.currentDragOperation = DragOperationController.GetOperationForMatchingDropzone( this.currentDropTarget, this.dragDataStore );\n                //}\n                // when dragover is not prevented and no dropzones are there, no drag operation\n                this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n            }\n            // Otherwise (if the dragover event is canceled), set the current drag operation based on the values of the effectAllowed and\n            // dropEffect attributes of the DragEvent object's dataTransfer object as they stood after the event dispatch finished\n            else {\n\n                console.log( \"dnd-poly: dragover prevented.\" );\n\n                this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\n            }\n        }\n\n        console.log( \"dnd-poly: d'n'd iteration ended. current drag operation: \" + this._currentDragOperation );\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is\n        // being performed (none, copy, link, or move), and set the current drag operation accordingly.\n\n        //Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows:\n        // ---------------------------------------------------------------------------------------------------------\n        // Drag operation   |\tFeedback\n        // \"copy\"\t        |  Data will be copied if dropped here.\n        // \"link\"\t        |  Data will be linked if dropped here.\n        // \"move\"\t        |  Data will be moved if dropped here.\n        // \"none\"\t        |  No operation allowed, dropping here will cancel the drag-and-drop operation.\n        // ---------------------------------------------------------------------------------------------------------\n\n        if( previousDragOperation !== this._currentDragOperation ) {\n            this._dragImage.classList.remove( CLASS_PREFIX + previousDragOperation );\n        }\n\n        const currentDragOperationClass = CLASS_PREFIX + this._currentDragOperation;\n\n        this._dragImage.classList.add( currentDragOperationClass );\n    }\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragOperationEnded( state:DragOperationState ):boolean {\n\n        console.log( \"dnd-poly: drag operation end detected with \" + this._currentDragOperation );\n\n        // if( DEBUG ) {\n        //\n        //     var debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n        //         debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\n        //\n        //     if( this._currentDropTarget ) {\n        //         this._currentDropTarget.classList.remove( debug_class_drop_target );\n        //\n        //     }\n        //     if( this._immediateUserSelection ) {\n        //         this._immediateUserSelection.classList.remove( debug_class_user_selection );\n        //     }\n        // }\n\n        //var dropped:boolean = undefined;\n\n        // Run the following steps, then stop the drag-and-drop operation:\n\n        // If the current drag operation is \"none\" (no drag operation), or,\n        // if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the Escape key), or\n        // if the current target element is null, then the drag operation failed.\n        const dragFailed = (this._currentDragOperation === DROP_EFFECTS[ DROP_EFFECT.NONE ]\n            || this._currentDropTarget === null\n            || state === DragOperationState.CANCELLED);\n        if( dragFailed ) {\n\n            // Run these substeps:\n\n            // Let dropped be false.\n            //dropped = false;\n\n            // If the current target element is a DOM element, fire a DND event named dragleave at it;\n            if( isDOMElement( this._currentDropTarget ) ) {\n                this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                dispatchDragEvent( \"dragleave\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n            }\n\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, if it is not null, use platform-specific conventions for drag cancellation.\n            //else if( this.currentDropTarget !== null ) {\n            //}\n        }\n        // Otherwise, the drag operation was as success; run these substeps:\n        else {\n\n            // Let dropped be true.\n            //dropped = true;\n\n            // If the current target element is a DOM element, fire a DND event named drop at it;\n            if( isDOMElement( this._currentDropTarget ) ) {\n\n                // If the event is canceled, set the current drag operation to the value of the dropEffect attribute of the\n                // DragEvent object's dataTransfer object as it stood after the event dispatch finished.\n\n                this._dragDataStore.mode = DragDataStoreMode.READONLY;\n                this._dataTransfer.dropEffect = this._currentDragOperation;\n                if( dispatchDragEvent( \"drop\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ===\n                    true ) {\n\n                    this._currentDragOperation = this._dataTransfer.dropEffect;\n                }\n                // Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows:\n                else {\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state)\n                    // or an editable element,\n                    // and the drag data store item list has an item with the drag data item type string \"text/plain\"\n                    // and the drag data item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                    // Insert the actual data of the first item in the drag data store item list to have a drag data item type string of\n                    // \"text/plain\" and a drag data item kind that is Plain Unicode string into the text field or editable element in a manner\n                    // consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at\n                    // the end of the field).\n                    //}\n                    // Otherwise\n                    //else {\n                    // Reset the current drag operation to \"none\".\n                    this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                    //}\n                }\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, use platform-specific conventions for indicating a drop.\n            //else {\n            //}\n        }\n\n        return dragFailed;\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( this.dragend( this.sourceNode ) ) {\n        //    return;\n        //}\n\n        // Run the appropriate steps from the following list as the default action of the dragend event:\n\n        //if( !dropped ) {\n        //    return;\n        //}\n        // dropped is true\n\n        //if( this.currentDragOperation !== \"move\" ) {\n        //    return;\n        //}\n        //// drag operation is move\n        //\n        //if( ElementIsTextDropzone( this.currentDropTarget ) === false ) {\n        //    return;\n        //}\n        //// element is textfield\n        //\n        //// and the source of the drag-and-drop operation is a selection in the DOM\n        //if( this.sourceNode.nodeType === 1 ) {\n        //    // The user agent should delete the range representing the dragged selection from the DOM.\n        //}\n        //// and the source of the drag-and-drop operation is a selection in a text field\n        //else if( this.sourceNode.nodeType === 3 ) {\n        //    // The user agent should delete the dragged selection from the relevant text field.\n        //}\n        //// Otherwise, The event has no default action.\n    }\n\n    // dispatch dragend event and cleanup drag operation\n    private _finishDragOperation():void {\n        console.log( \"dnd-poly: dragimage snap back transition ended\" );\n\n        // Fire a DND event named dragend at the source node.\n        this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = this._currentDragOperation;\n        dispatchDragEvent( \"dragend\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n\n        // drag operation over and out\n        this._dragOperationState = DragOperationState.ENDED;\n        this._cleanup();\n    }\n\n    //</editor-fold>\n}\n","import { addDocumentListener, createDragImage, onEvt, Point } from \"./internal/dom-utils\";\nimport { DragOperationController, DragOperationState } from \"./internal/drag-operation-controller\";\nimport { tryFindDraggableTarget } from \"./internal/drag-utils\";\nimport { detectFeatures } from \"./internal/feature-detection\";\nimport { EVENT_DRAG_DRAGSTART_PENDING, EVENT_DRAG_DRAGSTART_CANCEL } from \"./internal/constants\";\n\n// default config\nconst config:Config = {\n    iterationInterval: 150,\n    tryFindDraggableTarget: tryFindDraggableTarget,\n    dragImageSetup: createDragImage,\n    elementFromPoint: function( x, y ) { return document.elementFromPoint( x, y ); }\n};\n\n// reference to the currently active drag operation\nlet activeDragOperation:DragOperationController;\n\n/**\n * event handler for initial touch events that possibly start a drag and drop operation.\n */\nfunction onTouchstart( e:TouchEvent ) {\n\n    console.log( \"dnd-poly: global touchstart\" );\n\n    // From the moment that the user agent is to initiate the drag-and-drop operation,\n    // until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\n\n    // only allow one drag operation at a time\n    if( activeDragOperation ) {\n        console.log( \"dnd-poly: drag operation already active\" );\n        return;\n    }\n\n    let dragTarget = config.tryFindDraggableTarget( e );\n\n    // If there is no such element, then nothing is being dragged; abort these\n    // steps, the drag-and-drop operation is never started.\n    if( !dragTarget ) {\n        console.log(\"dnd-poly: no draggable at touchstart coordinates\");\n        return;\n    }\n\n    try {\n        activeDragOperation = new DragOperationController( e, config, dragTarget as HTMLElement, dragOperationEnded );\n    }\n    catch( err ) {\n        dragOperationEnded( config, e, DragOperationState.CANCELLED );\n        // rethrow exception after cleanup\n        throw err;\n    }\n}\n\nfunction onDelayTouchstart( evt:TouchEvent ) {\n\n    console.log(\"dnd-poly: setup delayed dragstart..\");\n\n    const el = evt.target;\n\n    const heldItem = () => {\n\n        console.log(\"dnd-poly: starting delayed drag..\");\n\n        end.off();\n        cancel.off();\n        move.off();\n        scroll.off();\n        onTouchstart( evt );\n    };\n\n    const onReleasedItem = (event:Event) => {\n\n        console.log(\"dnd-poly: aborting delayed drag because of \" + event.type);\n\n        end.off();\n        cancel.off();\n        move.off();\n        scroll.off();\n\n        if (el) {\n            el.dispatchEvent(new CustomEvent(EVENT_DRAG_DRAGSTART_CANCEL, { bubbles: true, cancelable: true }));\n        }\n\n        clearTimeout( timer );\n    };\n\n    if (el) {\n        el.dispatchEvent(new CustomEvent(EVENT_DRAG_DRAGSTART_PENDING, { bubbles: true, cancelable: true }));\n    }\n\n    const timer = window.setTimeout( heldItem, config.holdToDrag );\n\n    const end = onEvt( el, \"touchend\", onReleasedItem );\n    const cancel = onEvt( el, \"touchcancel\", onReleasedItem );\n    const move = onEvt( el, \"touchmove\", onReleasedItem );\n    // scroll events don't bubble, only way to listen to scroll events\n    // that are about to happen in nested scrollables is by listening in capture phase\n    const scroll = onEvt( window, \"scroll\", onReleasedItem, true );\n}\n\n/**\n * Implements callback invoked when a drag operation has ended or crashed.\n */\nfunction dragOperationEnded( _config:Config, event:TouchEvent, state:DragOperationState ) {\n\n    // we need to make the default action happen only when no drag operation took place\n    if( state === DragOperationState.POTENTIAL ) {\n\n        console.log( \"dnd-poly: Drag never started. Last event was \" + event.type );\n\n        // when lifecycle hook is present\n        if( _config.defaultActionOverride ) {\n\n            try {\n\n                _config.defaultActionOverride( event );\n\n                if( event.defaultPrevented ) {\n\n                    console.log( \"dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event\" );\n                }\n\n            }\n            catch( e ) {\n\n                console.log( \"dnd-poly: error in defaultActionOverride: \" + e );\n            }\n        }\n    }\n\n    // reset drag operation container\n    activeDragOperation = null;\n}\n\n//<editor-fold desc=\"public api\">\n\nexport { Point } from \"./internal/dom-utils\";\n\n// function signature for the dragImageTranslateOverride hook\nexport type DragImageTranslateOverrideFn = ( // corresponding touchmove event\n    event:TouchEvent,\n    // the processed touch event viewport coordinates\n    hoverCoordinates:Point,\n    // the element under the calculated touch coordinates\n    hoveredElement:HTMLElement,\n    // callback for updating the drag image offset\n    translateDragImageFn:( offsetX:number, offsetY:number ) => void ) => void;\n\nexport interface Config {\n\n    // flag to force the polyfill being applied and not rely on internal feature detection\n    forceApply?:boolean;\n\n    // useful for when you want the default drag image but still want to apply\n    // some static offset from touch coordinates to drag image coordinates\n    // defaults to (0,0)\n    dragImageOffset?:Point;\n\n    // if the dragImage shall be centered on the touch coordinates\n    // defaults to false\n    dragImageCenterOnTouch?:boolean;\n\n    // the drag and drop operation involves some processing. here you can specify in what interval this processing takes place.\n    // defaults to 150ms\n    iterationInterval?:number;\n\n    // hook for custom logic that decides if a drag operation should start\n    dragStartConditionOverride?:( event:TouchEvent ) => boolean;\n\n    // hook for custom logic that can manipulate the drag image translate offset\n    dragImageTranslateOverride?:DragImageTranslateOverrideFn;\n\n    // hook for custom logic that can override the default action based on the original touch event when the drag never started\n    // be sure to call event.preventDefault() if handling the default action in the override to prevent the browser default.\n    defaultActionOverride?:( event:TouchEvent ) => void;\n\n    // Drag action delay on touch devices (\"hold to drag\" functionality, useful for scrolling draggable items). Defaults to no delay.\n    holdToDrag?:number;\n\n    // function invoked for each touchstart event to determine if and which touched element is detected as \"draggable\"\n    tryFindDraggableTarget?:( event:TouchEvent ) => HTMLElement | undefined;\n\n    // function for creating a copy of the dragged element\n    dragImageSetup?:( element:HTMLElement ) => HTMLElement;\n\n    // function for determining element that is currently hovered while dragging\n    // defaults to `document.elementFromPoint()`\n    elementFromPoint?:( x:number, y:number ) => Element;\n}\n\nexport function polyfill( override?:Config ):boolean {\n\n    if( override ) {\n        // overwrite default config with user config\n        Object.keys( override ).forEach( function( key ) {\n            config[ key ] = override[ key ];\n        } );\n    }\n\n    // only do feature detection when config does not force apply the polyfill\n    if( !config.forceApply ) {\n\n        // feature/browser detection\n        const detectedFeatures = detectFeatures();\n\n        // if( DEBUG ) {\n        //     Object.keys( detectedFeatures ).forEach( function( key ) {\n        //         console.log( \"dnd-poly: detected feature '\" + key + \" = \" + detectedFeatures[ key ] + \"'\" );\n        //     } );\n        // }\n\n        // check if native drag and drop support is there\n        if( detectedFeatures.userAgentSupportingNativeDnD\n            && detectedFeatures.draggable\n            && detectedFeatures.dragEvents ) {\n            // no polyfilling required\n            return false;\n        }\n    }\n\n    console.log( \"dnd-poly: Applying mobile drag and drop polyfill.\" );\n\n    // add listeners suitable for detecting a potential drag operation\n    if( config.holdToDrag ) {\n        console.log(\"dnd-poly: holdToDrag set to \" + config.holdToDrag);\n        addDocumentListener( \"touchstart\", onDelayTouchstart, false );\n    } else {\n        addDocumentListener( \"touchstart\", onTouchstart, false );\n    }\n\n    return true;\n}\n\n//</editor-fold>\n"]},"metadata":{},"sourceType":"script"}